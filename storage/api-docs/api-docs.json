{
    "openapi": "3.0.0",
    "info": {
        "title": "Documentación Atlas",
        "description": "Documentación WPARK - API",
        "contact": {
            "email": "lchirinos@acercapartners.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "description": "Login User Here",
                "operationId": "authLogin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login Successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/Authentication"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/api/auth/logout": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "User Logout",
                "description": "Logout User Here",
                "operationId": "authLogout",
                "responses": {
                    "200": {
                        "description": "Logout Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/auth/reset-password": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User Reset Password",
                "description": "Reset Password",
                "operationId": "authResetPassword",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reset Password Successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/Authentication"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/forgot-password": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Forgot Password Send",
                "description": "Forgot Password Send Email",
                "operationId": "authForgotPasswordSend",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordSendRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email Send Successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/api/forgot-password-check": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Forgot Password Check",
                "description": "Forgot Password Check Token",
                "operationId": "authForgotPasswordCheckToken",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordCheckTokenRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Token validate Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/api/forgot-password-reset": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Forgot Password Reset",
                "description": "Forgot Password Reset",
                "operationId": "authForgotPasswordReset",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordResetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email Reset Successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/api/v1/recirculations/{vin}": {
            "get": {
                "tags": [
                    "Recirculations"
                ],
                "summary": "Recirculations Get",
                "description": "SOAP FORD",
                "operationId": "recirculationsGet",
                "responses": {
                    "200": {
                        "description": "Data FORD"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/areas": {
            "get": {
                "tags": [
                    "Areas"
                ],
                "summary": "Areas List",
                "description": "List of areas",
                "operationId": "indexAreas",
                "responses": {
                    "200": {
                        "description": "Area list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Areas"
                ],
                "summary": "Create New Area",
                "description": "Create New Area",
                "operationId": "storeArea",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AreaStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Area"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/areas/datatables": {
            "get": {
                "tags": [
                    "Areas"
                ],
                "summary": "Areas List with datatables",
                "description": "List of areas with datatables",
                "operationId": "datatablesAreas",
                "responses": {
                    "200": {
                        "description": "Area list Successfully with datatables"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/areas/{id}": {
            "get": {
                "tags": [
                    "Areas"
                ],
                "summary": "Show Area Details",
                "description": "Show Area Details",
                "operationId": "showArea",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Area Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Areas"
                ],
                "summary": "Delete Area",
                "description": "Delete Area and all associated parkings, rows and slots",
                "operationId": "destroyArea",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Area successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Areas"
                ],
                "summary": "Restore Area",
                "description": "Restore Area and all associated parkings, rows and slots",
                "operationId": "restoreArea",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Area restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/blocks": {
            "get": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Blocks List",
                "description": "List of blocks",
                "operationId": "indexBlocks",
                "parameters": [
                    {
                        "name": "includes",
                        "in": "query",
                        "description": "Añadir en la respuesta reglas, filas",
                        "required": false,
                        "example": "rows,rules"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filtro nombre del bloque",
                        "required": false,
                        "example": "BLOQUE"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Create New Block",
                "description": "Create New Block",
                "operationId": "storeBlock",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlockStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Block"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/blocks/{id}": {
            "get": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Show Block Details",
                "description": "Show Block Details",
                "operationId": "showBlock",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Block Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Update Block",
                "description": "Update Block",
                "operationId": "updateBlock",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlockUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Block"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Delete Block",
                "description": "Delete Block",
                "operationId": "destroyBlock",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Block successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Restore Block",
                "description": "Restore Block",
                "operationId": "restoreBlock",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Block restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/blocks/{id}/toggle-active": {
            "patch": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Toggle Active Block",
                "description": "Toggle Active Block",
                "operationId": "toggleActiveBlock",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block toggle active successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/blocks/{id}/add-rows": {
            "patch": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Add Block to rows",
                "description": "Add Block to rows",
                "operationId": "addBlockToRows",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlockAddToRowsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The block has been assigned to the specified rows."
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/blocks/{id}/rows": {
            "get": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Row List of block",
                "description": "Row List of block",
                "operationId": "indexBlocksRows",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Row list of Block Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/brands": {
            "get": {
                "tags": [
                    "Brands"
                ],
                "summary": "Brands List",
                "description": "List of brands",
                "operationId": "indexBrands",
                "responses": {
                    "200": {
                        "description": "Brand list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Brands"
                ],
                "summary": "Create New Brand",
                "description": "Create New Brand",
                "operationId": "storeBrand",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BrandStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Brand"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/brands/{id}": {
            "get": {
                "tags": [
                    "Brands"
                ],
                "summary": "Show Brand Details",
                "description": "Show Brand Details",
                "operationId": "showBrand",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Brand Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Brands"
                ],
                "summary": "Update Brand",
                "description": "Update Brand",
                "operationId": "updateBrand",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BrandUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Brand"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Brands"
                ],
                "summary": "Delete Brand",
                "description": "Delete Brand",
                "operationId": "destroyBrand",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Brand successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Brands"
                ],
                "summary": "Restore Brand",
                "description": "Restore Brand",
                "operationId": "restoreBrand",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Brand restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/carriers": {
            "get": {
                "tags": [
                    "Carriers"
                ],
                "summary": "Carriers List",
                "description": "List of carriers",
                "operationId": "indexCarriers",
                "responses": {
                    "200": {
                        "description": "Carriers list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Carriers"
                ],
                "summary": "Create New Carrier",
                "description": "Create New Carrier",
                "operationId": "storeCarrier",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CarrierStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Carrier"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/carriers/datatables": {
            "get": {
                "tags": [
                    "Carriers"
                ],
                "summary": "Carriers List with datatables",
                "description": "List of carriers with datatables",
                "operationId": "datatablesCarriers",
                "responses": {
                    "200": {
                        "description": "Carriers list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/carriers/{id}": {
            "get": {
                "tags": [
                    "Carriers"
                ],
                "summary": "Show Carrier Details",
                "description": "Show Carrier Details",
                "operationId": "showCarrier",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Carrier Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Carriers"
                ],
                "summary": "Update Carrier",
                "description": "Update Carrier",
                "operationId": "updateCarrier",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CarrierUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Carrier"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Carriers"
                ],
                "summary": "Delete Carrier",
                "description": "Delete Carrier",
                "operationId": "destroyCarrier",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Carrier successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Carriers"
                ],
                "summary": "Restore Carrier",
                "description": "Restore Carrier",
                "operationId": "restoreCarrier",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Carrier restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/carriers/match-vins": {
            "post": {
                "tags": [
                    "Carriers",
                    "Vins"
                ],
                "summary": "Carrier match destiny vehicles",
                "description": "Carrier match destiny vehicles",
                "operationId": "matchVinsCarrier",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CarrierMatchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Carrier restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/colors": {
            "get": {
                "tags": [
                    "Colors"
                ],
                "summary": "Colors List",
                "description": "List of colors",
                "operationId": "indexColors",
                "responses": {
                    "200": {
                        "description": "Color list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Colors"
                ],
                "summary": "Create New Color",
                "description": "Create New Color",
                "operationId": "storeColor",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ColorStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Color"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/colors/datatables": {
            "post": {
                "tags": [
                    "Colors"
                ],
                "summary": "Colors List with datatables",
                "description": "List of colors with datatables",
                "operationId": "datatablesColors",
                "responses": {
                    "200": {
                        "description": "Color list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/colors/{id}": {
            "get": {
                "tags": [
                    "Colors"
                ],
                "summary": "Show Color Details",
                "description": "Show Color Details",
                "operationId": "showColor",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Color Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Colors"
                ],
                "summary": "Update Color",
                "description": "Update Color",
                "operationId": "updateColor",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ColorUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Color"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Colors"
                ],
                "summary": "Delete Color",
                "description": "Delete Color",
                "operationId": "destroyColor",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Color successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Colors"
                ],
                "summary": "Restore Color",
                "description": "Restore Color",
                "operationId": "restoreColor",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Color restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/compounds": {
            "get": {
                "tags": [
                    "Compounds"
                ],
                "summary": "Compounds List",
                "description": "List of compounds",
                "operationId": "indexCompounds",
                "responses": {
                    "200": {
                        "description": "Compound list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Compounds"
                ],
                "summary": "Create New Compound",
                "description": "Create New Compound",
                "operationId": "storeCompound",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompoundStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Compound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/compounds/datatables": {
            "post": {
                "tags": [
                    "Compounds"
                ],
                "summary": "Compounds List with datatables",
                "description": "List of compounds with datatables",
                "operationId": "datatablesCompounds",
                "responses": {
                    "200": {
                        "description": "Compound list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/compounds/{id}": {
            "get": {
                "tags": [
                    "Compounds"
                ],
                "summary": "Show Compound Details",
                "description": "Show Compound Details",
                "operationId": "showCompound",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Compound Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Compounds"
                ],
                "summary": "Update Compound",
                "description": "Update Compound",
                "operationId": "updateCompound",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompoundUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Compound"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Compounds"
                ],
                "summary": "Delete Compound",
                "description": "Delete Compound",
                "operationId": "destroyCompound",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Compound successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Compounds"
                ],
                "summary": "Restore Compound",
                "description": "Restore Compound",
                "operationId": "restoreCompound",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Compound restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/conditions": {
            "get": {
                "tags": [
                    "Conditions"
                ],
                "summary": "Conditions List",
                "description": "List of conditions",
                "operationId": "indexConditions",
                "responses": {
                    "200": {
                        "description": "Condition list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Conditions"
                ],
                "summary": "Create New Condition",
                "description": "Create New Condition",
                "operationId": "storeCondition",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConditionStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Condition"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/conditions/{id}": {
            "get": {
                "tags": [
                    "Conditions"
                ],
                "summary": "Show Condition Details",
                "description": "Show Condition Details",
                "operationId": "showCondition",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Condition Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Conditions"
                ],
                "summary": "Update Condition",
                "description": "Update Condition",
                "operationId": "updateCondition",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConditionUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Condition"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Conditions"
                ],
                "summary": "Delete Condition",
                "description": "Delete Condition",
                "operationId": "destroyCondition",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Condition successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Conditions"
                ],
                "summary": "Restore Condition",
                "description": "Restore Condition",
                "operationId": "restoreCondition",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Condition restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/conditions/{id}/model-data": {
            "get": {
                "tags": [
                    "Conditions"
                ],
                "summary": "Model data list of condition",
                "description": "Model data list of condition",
                "operationId": "indexConditionsModelData",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model data list of Condition Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/countries": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Countries List",
                "description": "List of countries",
                "operationId": "indexCountries",
                "responses": {
                    "200": {
                        "description": "Country list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Countries"
                ],
                "summary": "Create New Country",
                "description": "Create New Country",
                "operationId": "storeCountry",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CountryStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Country"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/countries/datatables": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Countries List with datatables",
                "description": "List of countries with datatables",
                "operationId": "datatablesCountries",
                "responses": {
                    "200": {
                        "description": "Country list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/countries/{id}": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Show Country Details",
                "description": "Show Country Details",
                "operationId": "showCountry",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Country Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Countries"
                ],
                "summary": "Update Country",
                "description": "Update Country",
                "operationId": "updateCountry",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CountryUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Country"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Countries"
                ],
                "summary": "Delete Country",
                "description": "Delete Country",
                "operationId": "destroyCountry",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Country successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Countries"
                ],
                "summary": "Restore Country",
                "description": "Restore Country",
                "operationId": "restoreCountry",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Country restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/dealers": {
            "get": {
                "tags": [
                    "Dealers"
                ],
                "summary": "Dealers List",
                "description": "List of dealers",
                "operationId": "indexDealers",
                "responses": {
                    "200": {
                        "description": "Dealers list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Dealers"
                ],
                "summary": "Create New Dealer",
                "description": "Create New Dealer",
                "operationId": "storeDealer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DealerStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Dealer"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/dealers/{id}": {
            "get": {
                "tags": [
                    "Dealers"
                ],
                "summary": "Show Dealer Details",
                "description": "Show Dealer Details",
                "operationId": "showDealer",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Dealer Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Dealers"
                ],
                "summary": "Update Dealer",
                "description": "Update Dealer",
                "operationId": "updateDealer",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DealerUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Dealer"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Dealers"
                ],
                "summary": "Delete Dealer",
                "description": "Delete Dealer",
                "operationId": "destroyDealer",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Dealer successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Dealers"
                ],
                "summary": "Restore Dealer",
                "description": "Restore Dealer",
                "operationId": "restoreDealer",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Dealer restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/designs": {
            "get": {
                "tags": [
                    "Designs"
                ],
                "summary": "Designs List",
                "description": "List of designs",
                "operationId": "indexDesigns",
                "responses": {
                    "200": {
                        "description": "Design list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Designs"
                ],
                "summary": "Create New Design",
                "description": "Create New Design",
                "operationId": "storeDesign",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DesignStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Design"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/designs/datatables": {
            "post": {
                "tags": [
                    "Designs"
                ],
                "summary": "Designs List with datatables",
                "description": "List of designs with datatables",
                "operationId": "datatablesDesigns",
                "responses": {
                    "200": {
                        "description": "Design list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/designs/{id}": {
            "get": {
                "tags": [
                    "Designs"
                ],
                "summary": "Show Design Details",
                "description": "Show Design Details",
                "operationId": "showDesign",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Design Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Designs"
                ],
                "summary": "Update Design",
                "description": "Update Design",
                "operationId": "updateDesign",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DesignUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Design"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Designs"
                ],
                "summary": "Delete Design",
                "description": "Delete Design",
                "operationId": "destroyDesign",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Design successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Designs"
                ],
                "summary": "Restore Design",
                "description": "Restore Design",
                "operationId": "restoreDesign",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Design restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/destination-codes": {
            "get": {
                "tags": [
                    "DestinationCodes"
                ],
                "summary": "DestinationCodes List",
                "description": "List of destinationCodes",
                "operationId": "indexDestinationCodes",
                "responses": {
                    "200": {
                        "description": "DestinationCode list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "DestinationCodes"
                ],
                "summary": "Create New DestinationCode",
                "description": "Create New DestinationCode",
                "operationId": "storeDestinationCode",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestinationCodeStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New DestinationCode"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/destination-codes/datatables": {
            "get": {
                "tags": [
                    "DestinationCodes"
                ],
                "summary": "DestinationCodes List with datatables",
                "description": "List of destinationCodes with datatables",
                "operationId": "datatablesDestinationCodes",
                "responses": {
                    "200": {
                        "description": "DestinationCode list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/destination-codes/{id}": {
            "get": {
                "tags": [
                    "DestinationCodes"
                ],
                "summary": "Show DestinationCode Details",
                "description": "Show DestinationCode Details",
                "operationId": "showDestinationCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show DestinationCode Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "DestinationCodes"
                ],
                "summary": "Update DestinationCode",
                "description": "Update DestinationCode",
                "operationId": "updateDestinationCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestinationCodeUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update DestinationCode"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DestinationCodes"
                ],
                "summary": "Delete DestinationCode",
                "description": "Delete DestinationCode",
                "operationId": "destroyDestinationCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete DestinationCode successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "DestinationCodes"
                ],
                "summary": "Restore DestinationCode",
                "description": "Restore DestinationCode",
                "operationId": "restoreDestinationCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "DestinationCode restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/freight-verify/vehicle-received": {
            "post": {
                "tags": [
                    "FreightVerify"
                ],
                "summary": "Envío de milestone de Vehicle Received a FreightVerify",
                "description": "Envío de milestone de Vehicle Received a FreightVerify",
                "operationId": "sendVehicleReceivedMilestone",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VehicleReceivedRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "FreightVerify response data"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/holds": {
            "get": {
                "tags": [
                    "Holds"
                ],
                "summary": "Holds List",
                "description": "List of holds",
                "operationId": "indexHolds",
                "responses": {
                    "200": {
                        "description": "Hold list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Holds"
                ],
                "summary": "Create New Hold",
                "description": "Create New Hold",
                "operationId": "storeHold",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HoldStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Hold"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/holds/datatables": {
            "post": {
                "tags": [
                    "Holds"
                ],
                "summary": "Holds List with datatables",
                "description": "List of holds with datatables",
                "operationId": "datatablesHolds",
                "responses": {
                    "200": {
                        "description": "Hold list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/holds/{id}": {
            "get": {
                "tags": [
                    "Holds"
                ],
                "summary": "Show Hold Details",
                "description": "Show Hold Details",
                "operationId": "showHold",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Hold Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Holds"
                ],
                "summary": "Update Hold",
                "description": "Update Hold",
                "operationId": "updateHold",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HoldUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Hold"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Holds"
                ],
                "summary": "Delete Hold",
                "description": "Delete Hold",
                "operationId": "destroyHold",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Hold successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Holds"
                ],
                "summary": "Restore Hold",
                "description": "Restore Hold",
                "operationId": "restoreHold",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Hold restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/holds/{id}/toggle-active": {
            "patch": {
                "tags": [
                    "Holds"
                ],
                "summary": "Toggle Active Hold",
                "description": "Toggle Active Hold",
                "operationId": "toggleActiveHold",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hold toggle active successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/loads/{load}/confirm-left": {
            "get": {
                "tags": [
                    "Loads"
                ],
                "summary": "Confirm Left",
                "description": "Confirm left of load",
                "operationId": "confirmLeftLoad",
                "responses": {
                    "200": {
                        "description": "Confirmed load output"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/loads/check-vehicles": {
            "post": {
                "tags": [
                    "Loads"
                ],
                "summary": "Check Vehicles",
                "description": "Validate if the vehicles have the same destination as the carrier on their routes",
                "operationId": "checkVehicles",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoadValidateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Check Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/loads": {
            "get": {
                "tags": [
                    "Designs"
                ],
                "summary": "Loads List",
                "description": "List of loads",
                "operationId": "indexLoads",
                "responses": {
                    "200": {
                        "description": "Design list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/loads/datatables": {
            "post": {
                "tags": [
                    "Loads"
                ],
                "summary": "Loads List with datatables",
                "description": "List of Loads with datatables",
                "operationId": "datatablesLoads",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Load list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/load/generate": {
            "post": {
                "tags": [
                    "Loads"
                ],
                "summary": "Generate New Load",
                "description": "Generate New Load",
                "operationId": "generateLoad",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoadGenerateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Load"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/loads/{id}/vehicles/datatables": {
            "post": {
                "tags": [
                    "Loads",
                    "Vehicles"
                ],
                "summary": "Vehicles List of Load with datatables",
                "description": "Vehicles List of Load with datatables",
                "operationId": "datatablesLoadsVehicles",
                "responses": {
                    "200": {
                        "description": "Vehicles of load list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/loads/{load}/vehicles/{vehicle}/unlink": {
            "post": {
                "tags": [
                    "Loads",
                    "Vehicles"
                ],
                "summary": "Delete Vehicle of Load",
                "description": "Delete Vehicle of Load",
                "operationId": "unlinkVehicleLoad",
                "responses": {
                    "200": {
                        "description": "Delete vehicle of load Successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/movements": {
            "get": {
                "tags": [
                    "Movements"
                ],
                "summary": "Movements List",
                "description": "List of movements",
                "operationId": "indexMovements",
                "responses": {
                    "200": {
                        "description": "Movement list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Movements"
                ],
                "summary": "Create New Movement",
                "description": "Create New Movement",
                "operationId": "storeMovement",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MovementStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Movement"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/movements/datatables": {
            "post": {
                "tags": [
                    "Movements"
                ],
                "summary": "Movements List",
                "description": "List of movements with datatables",
                "operationId": "datatablesMovements",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MovementDatatablesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Movements list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/movements/{id}": {
            "get": {
                "tags": [
                    "Movements"
                ],
                "summary": "Show Movement Details",
                "description": "Show Movement Details",
                "operationId": "showMovement",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    },
                    {
                        "name": "includes",
                        "in": "query",
                        "description": "Añadir bloques, condiciones",
                        "required": false,
                        "example": "blocks,conditions"
                    },
                    {
                        "name": "extra_includes",
                        "in": "query",
                        "description": "Añadir valores de condiciones",
                        "required": false,
                        "example": "conditions.values"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Movement Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/movements/{id}/confirm": {
            "put": {
                "tags": [
                    "Movements"
                ],
                "summary": "Confirm Movement",
                "description": "Confirm Movement",
                "operationId": "confirmMovement",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Confirm Movement"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/movements/{id}/cancel": {
            "put": {
                "tags": [
                    "Movements"
                ],
                "summary": "Cancel Movement",
                "description": "Cancel Movement",
                "operationId": "cancelMovement",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cancel Movement"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/movement/recomend": {
            "post": {
                "tags": [
                    "Movements"
                ],
                "summary": "Movements Recommend",
                "description": "Este servicio contempla las cuatro acciones definidas para mover un vehículo desde que sale de CANOPY\r\n     *                   Las acciones son las siguientes:\r\n     *                   - action = 1 : Se ejecuta al pulsar el botón OK y hace una recomendación de movimiento en presorting\r\n     *                   - action = 2 : Se ejecuta al pulsar el botón NOK y muestra desplegable para mandar vehículo a planta\r\n     *                   - action = 3 : Se ejecuta al pulsar el botón VENTAS y permite elegir ubicación manual\r\n     *                   - action = 4 : Se ejecuta al pulsar el botón ESCAPE y hace una recomendación de movimiento en posición final",
                "operationId": "recommendMovements",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MovementRecommendRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Movement Recommend Successfully"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/notifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Notifications List",
                "description": "List of notifications",
                "operationId": "indexNotifications",
                "parameters": [
                    {
                        "name": "reference_code",
                        "in": "query",
                        "description": "Filtrar por reference_code",
                        "required": false,
                        "example": "ROW_COMPLETED"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Límite de resultados",
                        "required": false,
                        "example": "5"
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Ordenar por campo específico",
                        "required": false,
                        "example": "id"
                    },
                    {
                        "name": "sort_direction",
                        "in": "query",
                        "description": "Ordenar por orden ascendente o descendente",
                        "required": false,
                        "example": "desc"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/notifications/datatables": {
            "post": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Notifications List",
                "description": "List of notifications with datatables",
                "operationId": "datatablesNotifications",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datatables"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notifications list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/notifications/{id}": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Show Notification Details",
                "description": "Show Notification Details",
                "operationId": "showNotification",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    },
                    {
                        "name": "includes",
                        "in": "query",
                        "description": "Añadir bloques, condiciones",
                        "required": false,
                        "example": "blocks,conditions"
                    },
                    {
                        "name": "extra_includes",
                        "in": "query",
                        "description": "Añadir valores de condiciones",
                        "required": false,
                        "example": "conditions.values"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Notification Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Delete Notification",
                "description": "Delete Notification",
                "operationId": "destroyNotification",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Notification successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Restore Notification",
                "description": "Restore Notification",
                "operationId": "restoreNotification",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Notification restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/parkings": {
            "get": {
                "tags": [
                    "Parkings"
                ],
                "summary": "Parkings List",
                "description": "List of parkings",
                "operationId": "indexParkings",
                "responses": {
                    "200": {
                        "description": "Parking list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/parkings/datatables": {
            "post": {
                "tags": [
                    "Parkings"
                ],
                "summary": "Parkings List with datatables",
                "description": "List of parkings with datatables",
                "operationId": "datatablesParkings",
                "responses": {
                    "200": {
                        "description": "Parking list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/parkings/{id}": {
            "get": {
                "tags": [
                    "Parkings"
                ],
                "summary": "Show Parking Details",
                "description": "Show Parking Details",
                "operationId": "showParking",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Parking Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Parkings"
                ],
                "summary": "Update Parking",
                "description": "Update Parking",
                "operationId": "updateParking",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParkingUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Parking"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Parkings"
                ],
                "summary": "Delete Parking",
                "description": "Delete Parking",
                "operationId": "destroyParking",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Parking successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Parkings"
                ],
                "summary": "Restore Parking",
                "description": "Restore Parking",
                "operationId": "restoreParking",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Parking restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/parkings/{id}/toggle-active": {
            "patch": {
                "tags": [
                    "Parkings"
                ],
                "summary": "Toggle Active Parking",
                "description": "Toggle Active Parking",
                "operationId": "toggleActiveParking",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Parking toogle active successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/parking-design": {
            "post": {
                "tags": [
                    "ParkingDesigns"
                ],
                "summary": "Create New Parking",
                "description": "Create New Parking and all associated rows and slots",
                "operationId": "storeParkingDesign",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParkingDesignStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New ParkingDesign"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/parkings/{id}/rows": {
            "get": {
                "tags": [
                    "Parkings"
                ],
                "summary": "Row List of parking",
                "description": "Row List of parking",
                "operationId": "indexParkingsRows",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Row list of Parking Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/parking-types": {
            "get": {
                "tags": [
                    "ParkingTypes"
                ],
                "summary": "ParkingTypes List",
                "description": "List of parkingTypes",
                "operationId": "indexParkingTypes",
                "responses": {
                    "200": {
                        "description": "ParkingType list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ParkingTypes"
                ],
                "summary": "Create New ParkingType",
                "description": "Create New ParkingType",
                "operationId": "storeParkingType",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParkingTypeStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New ParkingType"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/parking-types/{id}": {
            "get": {
                "tags": [
                    "ParkingTypes"
                ],
                "summary": "Show ParkingType Details",
                "description": "Show ParkingType Details",
                "operationId": "showParkingType",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show ParkingType Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "ParkingTypes"
                ],
                "summary": "Update ParkingType",
                "description": "Update ParkingType",
                "operationId": "updateParkingType",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParkingTypeUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update ParkingType"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ParkingTypes"
                ],
                "summary": "Delete ParkingType",
                "description": "Delete ParkingType",
                "operationId": "destroyParkingType",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete ParkingType successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "ParkingTypes"
                ],
                "summary": "Restore ParkingType",
                "description": "Restore ParkingType",
                "operationId": "restoreParkingType",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ParkingType restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/routes-types/{id}/carriers": {
            "get": {
                "tags": [
                    "RoutesTypes"
                ],
                "summary": "List of carriers given a route type",
                "description": "List of carriers given a route type",
                "operationId": "indexRoutesTypesCarriers",
                "responses": {
                    "200": {
                        "description": "Carriers list successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/routes": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Routes List",
                "description": "List of routes",
                "operationId": "indexRoutes",
                "responses": {
                    "200": {
                        "description": "Route list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Routes"
                ],
                "summary": "Create New Route",
                "description": "Create New Route",
                "operationId": "storeRoute",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RouteStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Route"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/routes/{id}": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Show Route Details",
                "description": "Show Route Details",
                "operationId": "showRoute",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Route Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Routes"
                ],
                "summary": "Update Route",
                "description": "Update Route",
                "operationId": "updateRoute",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RouteUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Route"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Routes"
                ],
                "summary": "Delete Route",
                "description": "Delete Route",
                "operationId": "destroyRoute",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Route successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Routes"
                ],
                "summary": "Restore Route",
                "description": "Restore Route",
                "operationId": "restoreRoute",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Route restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rows/{row}/blocks/{block}": {
            "patch": {
                "tags": [
                    "Rows"
                ],
                "summary": "Update block to row",
                "description": "Update block to row",
                "operationId": "updateRowsBlocks",
                "parameters": [
                    {
                        "name": "row",
                        "in": "path",
                        "description": "ID of row",
                        "required": true,
                        "example": "1"
                    },
                    {
                        "name": "block",
                        "in": "path",
                        "description": "ID of block",
                        "required": true,
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update Block to Row Successfully"
                    },
                    "400": {
                        "description": "The selected row is not in the specified block."
                    },
                    "404": {
                        "description": "Block or Row not found."
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rows/{row}/blocks/unlink": {
            "patch": {
                "tags": [
                    "Rows"
                ],
                "summary": "Unlink block of row",
                "description": "Unlink block of row",
                "operationId": "unlinkRowsBlocks",
                "parameters": [
                    {
                        "name": "row",
                        "in": "path",
                        "description": "ID of row",
                        "required": true,
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Unlink Block of Row Successfully"
                    },
                    "400": {
                        "description": "The selected row is not in the specified block."
                    },
                    "404": {
                        "description": "Block or Row not found."
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rows": {
            "get": {
                "tags": [
                    "Rows"
                ],
                "summary": "Rows List",
                "description": "List of rows",
                "operationId": "indexRows",
                "responses": {
                    "200": {
                        "description": "Row list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rows/{id}": {
            "get": {
                "tags": [
                    "Rows"
                ],
                "summary": "Show Row Details",
                "description": "Show Row Details",
                "operationId": "showRow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Row Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Rows"
                ],
                "summary": "Update Row",
                "description": "Update Row",
                "operationId": "updateRow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RowUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Row"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rows/{id}/toggle-active": {
            "patch": {
                "tags": [
                    "Rows"
                ],
                "summary": "Toggle Active Row",
                "description": "Toggle Active Row",
                "operationId": "toggleActiveRow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RowToggleActiveRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Row toggle active successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rows/show-by-qrcode/{qrcode}": {
            "get": {
                "tags": [
                    "Rows"
                ],
                "summary": "Show Row Details by QR code",
                "description": "Show Row Details by QR code",
                "operationId": "showRowByQrcode",
                "parameters": [
                    {
                        "parameter": "qrcode",
                        "name": "qrcode",
                        "in": "path",
                        "description": "qrcode, eg; 100.001",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Row Details by QR code"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rows/{id}/vehicles": {
            "get": {
                "tags": [
                    "Rows"
                ],
                "summary": "Vehicles List of row",
                "description": "Vehicles List of row",
                "operationId": "indexRowsVehicles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vehicles list of Row Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rules": {
            "get": {
                "tags": [
                    "Rules"
                ],
                "summary": "Rules List",
                "description": "List of rules",
                "operationId": "indexRules",
                "parameters": [
                    {
                        "name": "is_group",
                        "in": "query",
                        "description": "Filtro de reglas agrupadas o simples",
                        "required": false,
                        "example": "1"
                    },
                    {
                        "name": "includes",
                        "in": "query",
                        "description": "Añadir bloques, condiciones",
                        "required": false,
                        "example": "blocks,conditions"
                    },
                    {
                        "name": "extra_includes",
                        "in": "query",
                        "description": "Añadir valores de condiciones",
                        "required": false,
                        "example": "conditions.values"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rule list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Rules"
                ],
                "summary": "Create New Rule",
                "description": "Create New Rule",
                "operationId": "storeRule",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuleStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Rule"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rules/datatables": {
            "post": {
                "tags": [
                    "Rules"
                ],
                "summary": "Rules List with datatables",
                "description": "List of rules using datatables",
                "operationId": "datatablesRules",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/datatables"
                    },
                    {
                        "name": "is_group",
                        "in": "query",
                        "description": "Filtro de reglas agrupadas o simples",
                        "required": false,
                        "example": "1"
                    },
                    {
                        "name": "includes",
                        "in": "query",
                        "description": "Añadir bloques, condiciones",
                        "required": false,
                        "example": "blocks,conditions"
                    },
                    {
                        "name": "extra_includes",
                        "in": "query",
                        "description": "Añadir valores de condiciones",
                        "required": false,
                        "example": "conditions.values"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rule list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rules/{id}": {
            "get": {
                "tags": [
                    "Rules"
                ],
                "summary": "Show Rule Details",
                "description": "Show Rule Details",
                "operationId": "showRule",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    },
                    {
                        "name": "includes",
                        "in": "query",
                        "description": "Añadir bloques, condiciones",
                        "required": false,
                        "example": "blocks,conditions"
                    },
                    {
                        "name": "extra_includes",
                        "in": "query",
                        "description": "Añadir valores de condiciones",
                        "required": false,
                        "example": "conditions.values"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Rule Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Rules"
                ],
                "summary": "Update Rule",
                "description": "Update Rule",
                "operationId": "updateRule",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuleUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Rule"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Rules"
                ],
                "summary": "Delete Rule",
                "description": "Delete Rule",
                "operationId": "destroyRule",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Rule successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Rules"
                ],
                "summary": "Restore Rule",
                "description": "Restore Rule",
                "operationId": "restoreRule",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rule restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/rules/{id}/toggle-active": {
            "patch": {
                "tags": [
                    "Rules"
                ],
                "summary": "Toggle Active Rule",
                "description": "Toggle Active Rule",
                "operationId": "toggleActiveRule",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rule toggle active successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/slots": {
            "get": {
                "tags": [
                    "Slots"
                ],
                "summary": "Slots List",
                "description": "List of slots",
                "operationId": "indexSlots",
                "responses": {
                    "200": {
                        "description": "Slot list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/slots/{id}": {
            "get": {
                "tags": [
                    "Slots"
                ],
                "summary": "Show Slot Details",
                "description": "Show Slot Details",
                "operationId": "showSlot",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Slot Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Slots"
                ],
                "summary": "Update Slot",
                "description": "Update Slot",
                "operationId": "updateSlot",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SlotUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Slot"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/states": {
            "get": {
                "tags": [
                    "States"
                ],
                "summary": "States List",
                "description": "List of states",
                "operationId": "indexStates",
                "responses": {
                    "200": {
                        "description": "State list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "States"
                ],
                "summary": "Create New State",
                "description": "Create New State",
                "operationId": "storeState",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StateStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New State"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/states/{id}": {
            "get": {
                "tags": [
                    "States"
                ],
                "summary": "Show State Details",
                "description": "Show State Details",
                "operationId": "showState",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show State Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "States"
                ],
                "summary": "Update State",
                "description": "Update State",
                "operationId": "updateState",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StateUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update State"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "States"
                ],
                "summary": "Delete State",
                "description": "Delete State",
                "operationId": "destroyState",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete State successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "States"
                ],
                "summary": "Restore State",
                "description": "Restore State",
                "operationId": "restoreState",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "State restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/state/{id}/vehicles": {
            "get": {
                "tags": [
                    "States"
                ],
                "summary": "Vehicles List of state",
                "description": "Vehicles List of state",
                "operationId": "indexStatesVehicles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vehicles list of State Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/transports": {
            "get": {
                "tags": [
                    "Transports"
                ],
                "summary": "Transports List",
                "description": "List of transports",
                "operationId": "indexTransports",
                "responses": {
                    "200": {
                        "description": "Transport list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Transports"
                ],
                "summary": "Create New Transport",
                "description": "Create New Transport",
                "operationId": "storeTransport",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransportStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Transport"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/transports/{id}": {
            "get": {
                "tags": [
                    "Transports"
                ],
                "summary": "Show Transport Details",
                "description": "Show Transport Details",
                "operationId": "showTransport",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Transport Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Transports"
                ],
                "summary": "Update Transport",
                "description": "Update Transport",
                "operationId": "updateTransport",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransportUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Transport"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Transports"
                ],
                "summary": "Delete Transport",
                "description": "Delete Transport",
                "operationId": "destroyTransport",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Transport successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Transports"
                ],
                "summary": "Restore Transport",
                "description": "Restore Transport",
                "operationId": "restoreTransport",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Transport restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/transports/{id}/toggle-active": {
            "patch": {
                "tags": [
                    "Transports"
                ],
                "summary": "Toggle Active Transport",
                "description": "Toggle Active Transport",
                "operationId": "toggleActiveTransport",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transport toggle active successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Users List",
                "description": "List of users",
                "operationId": "indexUsers",
                "responses": {
                    "200": {
                        "description": "User list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create New User",
                "description": "Create New User",
                "operationId": "storeUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New User"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/users/datatables": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Users List with datatables",
                "description": "List of users with datatables",
                "operationId": "datatablesUsers",
                "responses": {
                    "200": {
                        "description": "User list with datatables Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Show User Details",
                "description": "Show User Details",
                "operationId": "showUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show User Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "description": "Update User",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update User successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "description": "Delete User",
                "operationId": "destroyUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete User successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Restore User",
                "description": "Restore User",
                "operationId": "restoreUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/me": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Show Login User Details",
                "description": "Show Login User Details",
                "operationId": "meUser",
                "responses": {
                    "200": {
                        "description": "Show Login User Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/users/generate-username": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Generate Username",
                "description": "Generate Username",
                "operationId": "generateUsernameUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserGenerateUsernameRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Get username value"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/stages": {
            "get": {
                "tags": [
                    "Stages"
                ],
                "summary": "Stages List",
                "description": "List of stages",
                "operationId": "indexStages",
                "responses": {
                    "200": {
                        "description": "Stage list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Stages"
                ],
                "summary": "Create New Stage",
                "description": "Create New Stage",
                "operationId": "storeStage",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StageStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Stage"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/stages/{id}": {
            "get": {
                "tags": [
                    "Stages"
                ],
                "summary": "Show Stage Details",
                "description": "Show Stage Details",
                "operationId": "showStage",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Stage Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Stages"
                ],
                "summary": "Update Stage",
                "description": "Update Stage",
                "operationId": "updateStage",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StageUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Stage"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Stages"
                ],
                "summary": "Delete Stage",
                "description": "Delete Stage",
                "operationId": "destroyStage",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Stage successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Stages"
                ],
                "summary": "Restore Stage",
                "description": "Restore Stage",
                "operationId": "restoreStage",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Stage restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicles": {
            "get": {
                "tags": [
                    "Vehicles"
                ],
                "summary": "Vehicles List",
                "description": "List of vehicles",
                "operationId": "indexVehicles",
                "parameters": [
                    {
                        "name": "paginate",
                        "in": "query",
                        "description": "Para mostrar la lista paginado o simple",
                        "required": false,
                        "example": "1"
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Ordenar por columna",
                        "required": false,
                        "example": "id"
                    },
                    {
                        "name": "sort_direction",
                        "in": "query",
                        "description": "Tipo de orden de columna: ASC o DESC",
                        "required": false,
                        "example": "ASC"
                    },
                    {
                        "name": "includes",
                        "in": "query",
                        "description": "Añadir modelo, color, código de destino, último estado, última etapa, último movimiento",
                        "required": false,
                        "example": "design,color,destinationCode,latestState,latestStage,lastMovement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vehicle list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicles/datatables": {
            "post": {
                "tags": [
                    "Vehicles"
                ],
                "summary": "Vehicles List to datatables plugin",
                "description": "List of vehicles to datatables plugin",
                "operationId": "datatablesVehicles",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VehicleDatatablesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Vehicle list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicles/{id}": {
            "get": {
                "tags": [
                    "Vehicles"
                ],
                "summary": "Show Vehicle Details",
                "description": "Show Vehicle Details",
                "operationId": "showVehicle",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Vehicle Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Vehicles"
                ],
                "summary": "Delete Vehicle",
                "description": "Delete Vehicle",
                "operationId": "destroyVehicle",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Vehicle successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Vehicles"
                ],
                "summary": "Restore Vehicle",
                "description": "Restore Vehicle",
                "operationId": "restoreVehicle",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Vehicle restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicles/{vehicle}/detail": {
            "get": {
                "tags": [
                    "Vehicles"
                ],
                "summary": "Show Vehicle info Details",
                "description": "Show Vehicle info Details",
                "operationId": "infoVehicle",
                "responses": {
                    "200": {
                        "description": "Show Vehicle info Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicles/vin/{vin}": {
            "get": {
                "tags": [
                    "Vehicles"
                ],
                "summary": "Match rules from vehicles",
                "description": "Match rules from vehicles",
                "operationId": "match-rules",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/vin"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/tracking-points": {
            "post": {
                "tags": [
                    "Tracking Points"
                ],
                "summary": "Create or update vehicle from stage",
                "description": "Create or update vehicle from stage",
                "operationId": "tracking-points",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VehicleStageRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ]
            }
        },
        "/api/v1/zones": {
            "get": {
                "tags": [
                    "Zones"
                ],
                "summary": "Zones List",
                "description": "List of zones",
                "operationId": "indexZones",
                "responses": {
                    "200": {
                        "description": "Zone list Successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Zones"
                ],
                "summary": "Create New Zone",
                "description": "Create New Zone",
                "operationId": "storeZone",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Create New Zone"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/zones/{id}": {
            "get": {
                "tags": [
                    "Zones"
                ],
                "summary": "Show Zone Details",
                "description": "Show Zone Details",
                "operationId": "showZone",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show Zone Details"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Zones"
                ],
                "summary": "Update Zone",
                "description": "Update Zone",
                "operationId": "updateZone",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update Zone"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Zones"
                ],
                "summary": "Delete Zone",
                "description": "Delete Zone",
                "operationId": "destroyZone",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Zone successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Zones"
                ],
                "summary": "Restore Zone",
                "description": "Restore Zone",
                "operationId": "restoreZone",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Zone restored successfully"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Area": {
                "required": [
                    "name",
                    "compound_id",
                    "zone_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del área",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AREA 1"
                    },
                    "compound_id": {
                        "description": "Indica la campa a la que pertence el área",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "zone_id": {
                        "description": "Indica la zona a la que pertence el área",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "rows": {
                        "description": "Número de filas que tiene el área",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "30"
                    },
                    "capacity": {
                        "description": "Capacidad (total de slots) del área",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "300"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Area"
                }
            },
            "Block": {
                "required": [
                    "name",
                    "is_presorting",
                    "active"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del bloque",
                        "type": "string",
                        "maxLength": 255,
                        "example": "BLOQUE ZP"
                    },
                    "is_presorting": {
                        "description": "Indica si el bloque es de presorting (0: No es presorting, 1: Es presorting)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "presorting_default": {
                        "description": "Indica si el bloque de presorting es por defecto (0: No es por defecto, 1: Es por defecto)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "active": {
                        "description": "Indica si el bloque está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Block"
                }
            },
            "Brand": {
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la marca",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FORD"
                    },
                    "code": {
                        "description": "Código de la marca",
                        "type": "string",
                        "maxLength": 255,
                        "example": "12"
                    },
                    "compound_id": {
                        "description": "Indica la campa asociada a la marca",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Brand"
                }
            },
            "Carrier": {
                "required": [
                    "name",
                    "short_name",
                    "code",
                    "active"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la empresa de transporte",
                        "type": "string",
                        "maxLength": 255,
                        "example": "SINTAX LOGISTICA SA"
                    },
                    "short_name": {
                        "description": "Nombre corto de la empresa de transporte",
                        "type": "string",
                        "maxLength": 255,
                        "example": "SINTAX"
                    },
                    "code": {
                        "description": "Código de la empresa de transporte",
                        "type": "string",
                        "maxLength": 25,
                        "example": "SINTAX"
                    },
                    "active": {
                        "description": "Indica si el transportista está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Carrier"
                }
            },
            "Color": {
                "required": [
                    "name",
                    "code",
                    "simple_name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 10,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre específico del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "RUBY RED"
                    },
                    "code": {
                        "description": "Código de color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "RYBB"
                    },
                    "simple_name": {
                        "description": "Nombre básico del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "RED"
                    },
                    "hex": {
                        "description": "Código hexadecimal del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "#9b111e"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Color"
                }
            },
            "Compound": {
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la campa",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Valencia Ford Plant"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Compound"
                }
            },
            "Condition": {
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la condición",
                        "type": "string",
                        "maxLength": 255,
                        "example": "CÓDIGO DESTINO"
                    },
                    "description": {
                        "description": "Descripción de la condición",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Condición por códigos de destino"
                    },
                    "model_condition_id": {
                        "description": "Indica si la condición será para un hold o para una regla",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "required": {
                        "description": "Indica si la condición es obligatoria (0: No es obligatoria, 1: Es obligatoria)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Condition"
                }
            },
            "Country": {
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del país",
                        "type": "string",
                        "maxLength": 255,
                        "example": "GERMANY"
                    },
                    "code": {
                        "description": "Código del país",
                        "type": "string",
                        "maxLength": 255,
                        "example": "GK"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Country"
                }
            },
            "Dealer": {
                "required": [
                    "name",
                    "code",
                    "zip_code",
                    "city",
                    "street",
                    "country"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "MOTOREBRE  S.A."
                    },
                    "code": {
                        "description": "Código del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "1045V"
                    },
                    "zip_code": {
                        "description": "Código postal del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "43870"
                    },
                    "city": {
                        "description": "Ciudad del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AMPOSTA"
                    },
                    "street": {
                        "description": "Dirección del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AVINGUDA DE SANT JAUME, S/N"
                    },
                    "country": {
                        "description": "Pais del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "España"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Dealer"
                }
            },
            "Design": {
                "required": [
                    "name",
                    "code",
                    "brand_id",
                    "length",
                    "width",
                    "height",
                    "weight",
                    "manufacturing",
                    "svg"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "KUGA 2021"
                    },
                    "short_name": {
                        "description": "Nombre corto del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "KUGA"
                    },
                    "code": {
                        "description": "Código del modelo",
                        "type": "string",
                        "maxLength": 25,
                        "example": "C250"
                    },
                    "brand_id": {
                        "description": "Indica la marca a la que pertence el modelo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "length": {
                        "description": "Longitud del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "4614"
                    },
                    "width": {
                        "description": "Anchura del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1882"
                    },
                    "height": {
                        "description": "Altura del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1661"
                    },
                    "weight": {
                        "description": "Peso del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1580"
                    },
                    "description": {
                        "description": "Descripción del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Kuga new"
                    },
                    "manufacturing": {
                        "description": "Indica si el modelo es importado o fabricado en campa (0: Importado, 1: Fabricado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "svg": {
                        "description": "Imagen del modelo",
                        "type": "string",
                        "example": "<svg>...</svg>"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Design"
                }
            },
            "DestinationCode": {
                "required": [
                    "name",
                    "code",
                    "country_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del código de destino",
                        "type": "string",
                        "maxLength": 100,
                        "example": "ANTWERP_CHINA"
                    },
                    "code": {
                        "description": "Código del código de destino",
                        "type": "string",
                        "maxLength": 5,
                        "example": "AC"
                    },
                    "country_id": {
                        "description": "Indica el país del código de destino",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "description": {
                        "description": "Descripción del código de destino",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Código de destino para Italia"
                    },
                    "active": {
                        "description": "Indica si el código de destino está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "DestinationCode"
                }
            },
            "Device": {
                "required": [
                    "name",
                    "uuid",
                    "device_type_id",
                    "active"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del dispositivo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "MOB003"
                    },
                    "uuid": {
                        "description": "Imei o IP del dispositivo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "867906036314920"
                    },
                    "device_type_id": {
                        "description": "Tipo del dispositivo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "version": {
                        "description": "Versión del dispositivo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "2.1.5"
                    },
                    "active": {
                        "description": "Indica si el dispositivo está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Device"
                }
            },
            "DeviceType": {
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del tipo de dispositivo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "MÓVIL"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "DeviceType"
                }
            },
            "Distance": {
                "required": [
                    "origin_slot_id",
                    "destination_slot_id",
                    "seconds"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "origin_slot_id": {
                        "description": "Indica la posición (slot) de origen",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_slot_id": {
                        "description": "Indica la posición (slot) de destino",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "seconds": {
                        "description": "Tiempo en segundos que se tarda de la posición de origen a la de destino",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "420"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Distance"
                }
            },
            "Hold": {
                "required": [
                    "name",
                    "code",
                    "priority",
                    "active"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del bloqueo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "STOLEN"
                    },
                    "code": {
                        "description": "Código del bloqueo",
                        "type": "string",
                        "maxLength": 25,
                        "example": "AZ"
                    },
                    "priority": {
                        "description": "Indica el orden de prioridad del bloqueo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "role_id": {
                        "description": "Indica el rol del usuario que puede aplicar un bloqueo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "active": {
                        "description": "Indica si el bloqueo está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Hold"
                }
            },
            "Load": {
                "required": [
                    "license_plate",
                    "transport_identifier",
                    "ready",
                    "compound_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "transport_identifier": {
                        "description": "Código de la carga/albarán",
                        "type": "string",
                        "maxLength": 50,
                        "example": "4529465"
                    },
                    "license_plate": {
                        "description": "Matrícula principal del método de transporte",
                        "type": "string",
                        "maxLength": 50,
                        "example": "45852-FRL"
                    },
                    "trailer_license_plate": {
                        "description": "Matrícula del remolque del método de transporte",
                        "type": "string",
                        "maxLength": 25,
                        "example": "58463-JKI"
                    },
                    "carrier_id": {
                        "description": "Indica la empresa de transporte que realiza la carga",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "exit_transport_id": {
                        "description": "Indica el medio de transporte de salida de los vehículos",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "compound_id": {
                        "description": "Indica la campa donde se realiza la carga",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "ready": {
                        "description": "Indica si la carga está preprada (0: No está preparada, 1: Está preparada)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "processed": {
                        "description": "Indica si la carga ya se ha realizado (0: No se ha realizado, 1: Se ha realizado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Load"
                }
            },
            "ModelCondition": {
                "required": [
                    "name",
                    "model"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la tabla a la que va asociada la condición",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Rules"
                    },
                    "model": {
                        "description": "Ruta del modelo al que va asociada la condición",
                        "type": "string",
                        "maxLength": 255,
                        "example": "App\\Models\\Rule"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ModelCondition"
                }
            },
            "ModelState": {
                "required": [
                    "name",
                    "model"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la tabla a la que va asociado el estado",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Vehicles"
                    },
                    "model": {
                        "description": "Ruta del modelo al que va asociado el estado",
                        "type": "string",
                        "maxLength": 255,
                        "example": "App\\Models\\Vehicle"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ModelState"
                }
            },
            "Movement": {
                "required": [
                    "vehicle_id",
                    "user_id",
                    "origin_position_id",
                    "destination_position_id",
                    "rule_id",
                    "dt_start",
                    "dt_end"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "vehicle_id": {
                        "description": "Indica el vehículo que se mueve",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "user_id": {
                        "description": "Indica el usuario que está moviendo el vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "origin_position_type": {
                        "description": "Indica el tipo de posición slot o parking de origen",
                        "type": "string",
                        "maxLength": 255,
                        "example": "App\\Models\\Parking"
                    },
                    "origin_position_id": {
                        "description": "Indica la posición desde donde se hace el movimiento",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_position_type": {
                        "description": "Indica el tipo de posición slot o parking de destino",
                        "type": "string",
                        "maxLength": 255,
                        "example": "App\\Models\\Slot"
                    },
                    "destination_position_id": {
                        "description": "Indica la posición haciá donde se hace el movimiento",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "category": {
                        "description": "Nombre de la categoría (shipping_rule_id) que se aplica en ese movimiento",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FLUSHING"
                    },
                    "confirmed": {
                        "description": "Indica si el movimiento se ha confirmado (0: No está confirmado, 1: Está confirmado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "canceled": {
                        "description": "Indica si el movimiento se ha cancelado (0: No está cancelado, 1: Está cancelado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "manual": {
                        "description": "Indica si el movimiento es el recomendado o manual (0: Recomendado, 1: Manual)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "dt_start": {
                        "description": "Fecha y hora del comienzo del movimiento",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "dt_end": {
                        "description": "Fecha y hora del final del movimiento",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-12 11:26:15"
                    },
                    "comments": {
                        "description": "Comentarios sobre la fila",
                        "type": "string",
                        "example": "Movimiento cancelado por bloqueo"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Movement"
                }
            },
            "Notification": {
                "required": [
                    "sender_id",
                    "type",
                    "reference_code",
                    "data"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "sender_id": {
                        "description": "Identificador del usuario que genera la notificación",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "recipient_id": {
                        "description": "Indentificador del usuario al que va dirigida la notificación",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "type": {
                        "description": "Clase sobre la que se ha creado la notificación",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Full row notification"
                    },
                    "resourceable_type": {
                        "description": "",
                        "type": "string",
                        "maxLength": 255,
                        "example": "App\\Models\\Row"
                    },
                    "resourceable_id": {
                        "description": "",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "reference_code": {
                        "description": "Código de referencia de la notificación",
                        "type": "string",
                        "maxLength": 255,
                        "example": "589645V"
                    },
                    "data": {
                        "description": "Datos relevantes sobre la notificación",
                        "type": "string",
                        "example": "{'row': '004'}"
                    },
                    "reat_at": {
                        "description": "Fecha y hora de cuando se ha leido la notificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Notification"
                }
            },
            "Parking": {
                "required": [
                    "name",
                    "area_id",
                    "parking_type_id",
                    "active"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del parking",
                        "type": "string",
                        "maxLength": 255,
                        "example": "PU"
                    },
                    "area_id": {
                        "description": "Indica el área al que pertenece el parking",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "parking_type_id": {
                        "description": "Indica el tipo de parking",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "start_row": {
                        "description": "La fila del área en la que empieza el parking",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "12"
                    },
                    "end_row": {
                        "description": "La fila del área en la que termina el parking",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "22"
                    },
                    "capacity": {
                        "description": "Capacidad (número de slots) del parking",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "80"
                    },
                    "fill": {
                        "description": "Número de slots ocupados en el parking",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "400.000"
                    },
                    "full": {
                        "description": "Indica si el parking está lleno (0: No está lleno, 1: Está lleno)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "order": {
                        "description": "Indica si se comienza a llenar desde la primera fila o la última (0: Orden Descendente, 1: Orden Ascendente)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "active": {
                        "description": "Indica si el parking está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "comments": {
                        "description": "Comentarios sobre el parking",
                        "type": "string",
                        "example": "Este parking deberá cambiar de ubicación"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Parking"
                }
            },
            "ParkingType": {
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del tipo de parking",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ESPIGA"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ParkingType"
                }
            },
            "Role": {
                "required": [
                    "name",
                    "guard_name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del rol",
                        "type": "string",
                        "maxLength": 255,
                        "example": "admin"
                    },
                    "guard_name": {
                        "description": "Donde se aplica el rol",
                        "type": "string",
                        "maxLength": 255,
                        "example": "web"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Role"
                }
            },
            "Route": {
                "required": [
                    "name",
                    "cdm_code",
                    "route_type_id",
                    "carrier_id",
                    "destination_code_id",
                    "origin_compund_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la ruta",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ANTWERP CHINA"
                    },
                    "cdm_code": {
                        "description": "Código de la ruta",
                        "type": "string",
                        "maxLength": 5,
                        "example": "ANTC1"
                    },
                    "route_type_id": {
                        "description": "Indica el tipo de ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "carrier_id": {
                        "description": "Indica la empresa de transporte que hace la ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_code_id": {
                        "description": "Indica el código de destino de la ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "origin_compound_id": {
                        "description": "Indica la campa de origen",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_compound_id": {
                        "description": "Indica la campa de destino",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "comments": {
                        "description": "Comentarios sobre la ruta",
                        "type": "string",
                        "example": "Esta ruta actualmente tiene un desvío"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Route"
                }
            },
            "RouteType": {
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del tipo de ruta",
                        "type": "string",
                        "maxLength": 255,
                        "example": "DEFAULT"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RouteType"
                }
            },
            "Row": {
                "required": [
                    "row_number",
                    "parking_id",
                    "capacity",
                    "capacitymm",
                    "alt_qr"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "row_number": {
                        "description": "Número de fila del parking",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "parking_id": {
                        "description": "Indica el parking al que pertenece la fila",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "block_id": {
                        "description": "Indica el bloque al que pertenece la fila",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "rule_id": {
                        "description": "Indica la regla de posición final de transporte heredada del primer vehículo que se posicionó en la fila",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "capacity": {
                        "description": "Número de slots que tiene la fila",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "8"
                    },
                    "fill": {
                        "description": "Número de slots ocupados en la fila",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "0"
                    },
                    "capacitymm": {
                        "description": "Capacidad en milímetros de la fila",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "40.000"
                    },
                    "fillmm": {
                        "description": "Capacidad en milímetros ocupados de la fila",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "0"
                    },
                    "full": {
                        "description": "Indica si la fila está llena (0: No está llena, 1: Está llena)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "alt_qr": {
                        "description": "Código QR de la fila",
                        "type": "string",
                        "example": "022.001"
                    },
                    "comments": {
                        "description": "Comentarios sobre la fila",
                        "type": "string",
                        "example": "La fila está reservada"
                    },
                    "active": {
                        "description": "Indica si la fila está activa (0: No está activa, 1: Está activa)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Row"
                }
            },
            "Rule": {
                "required": [
                    "name",
                    "is_group",
                    "active"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la regla",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FORD"
                    },
                    "countdown": {
                        "description": "Número de vehículos máximo para aplicarles la regla",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "priority": {
                        "description": "Indica el orden de prioridad de la regla",
                        "type": "integer",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "is_group": {
                        "description": "Indica si es una regla simple o un grupo de reglas (0: Regla simple, 1: Grupo de reglas)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "final_position": {
                        "description": "Indica si la regla es de posición final (0: No es posición final, 1: Es posición final)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "predefined_zone_id": {
                        "description": "Indica el parking al que va asociada la regla",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "carrier_id": {
                        "description": "Indica el transportista por defecto asociado a la regla",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "active": {
                        "description": "Indica si la regla está activa (0: No está activa, 1: Está activa)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Rule"
                }
            },
            "Slot": {
                "required": [
                    "slot_number",
                    "row_id",
                    "capacity",
                    "fill",
                    "capacitymm",
                    "fillmm"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "slot_number": {
                        "description": "Número de slot de la fila",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "row_id": {
                        "description": "Indica la fila a la que pertenece el slot",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "capacity": {
                        "description": "Capacidad del slot",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "fill": {
                        "description": "Indica si el slot está ocupado",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "capacitymm": {
                        "description": "Capacidad en milímetros del slot",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "5.000"
                    },
                    "fillmm": {
                        "description": "Capacidad en milímetros ocupados del slot",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "4.612"
                    },
                    "comments": {
                        "description": "Comentarios sobre el slot",
                        "type": "string",
                        "example": "La slot está reservado"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Slot"
                }
            },
            "Stage": {
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la estación",
                        "type": "string",
                        "maxLength": 255,
                        "example": "St3"
                    },
                    "code": {
                        "description": "Código de la estación",
                        "type": "string",
                        "maxLength": 5,
                        "example": "03"
                    },
                    "description": {
                        "description": "Descripción de la estación",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Stage 3 - Etapa de creación del vehículo"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Stage"
                }
            },
            "State": {
                "required": [
                    "name",
                    "model_state_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del estado",
                        "type": "string",
                        "maxLength": 255,
                        "example": "STATIONED"
                    },
                    "description": {
                        "description": "Descripción del estado",
                        "type": "string",
                        "maxLength": 255,
                        "example": "El vehículo está estacionado"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "State"
                }
            },
            "Transport": {
                "required": [
                    "name",
                    "active"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del transporte",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FACTORY"
                    },
                    "active": {
                        "description": "Indica si el transporte está activo (0: No esta activo, 1: Esta activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Transport"
                }
            },
            "User": {
                "required": [
                    "name",
                    "email",
                    "username",
                    "password",
                    "first_login",
                    "online"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre del usuario",
                        "type": "string",
                        "maxLength": 75,
                        "example": "Javier"
                    },
                    "surname": {
                        "description": "Apellidos del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Garrido Barroso"
                    },
                    "email": {
                        "description": "Email del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "jgbacerca@gmail.com"
                    },
                    "username": {
                        "description": "Nombre de usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "javier.garrido"
                    },
                    "password": {
                        "description": "Contraseña del usuario",
                        "type": "string",
                        "maxLength": 100,
                        "example": "jgbTest6;"
                    },
                    "remember_token": {
                        "description": "Token generado tras usar el servicio de recordar contraseña",
                        "type": "string",
                        "maxLength": 100,
                        "example": "725br4gOdlqpR6dfGq9HhZrUelCvHAPMD4lxUen1D3jd91ZQRSqHTxZDH6rV"
                    },
                    "first_login": {
                        "description": "Indica si el usuario ha entrado ya en la aplicación (0: No ha entrado, 1: Ya ha entrado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "last_login": {
                        "description": "Fecha y hora de la última vez que el usuario ha entrado en la aplicación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-10-09 11:20:01"
                    },
                    "online": {
                        "description": "Indica si el usuario está conectado (0: No conectado, 1: Conectado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "last_change_password": {
                        "description": "Fecha del último cambio de contraseña",
                        "type": "string",
                        "format": "date",
                        "example": "2021-09-09"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "User"
                }
            },
            "Vehicle": {
                "required": [
                    "vin",
                    "vin_shor",
                    "design_id",
                    "color_id",
                    "destination_code",
                    "entry_transport_id",
                    "eoc"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "vin": {
                        "description": "Número de bastidor del vehículo",
                        "type": "string",
                        "maxLength": 17,
                        "example": "WF0FXXWPMFKY73028"
                    },
                    "lvin": {
                        "description": "Número de bastidor lógico del vehículo",
                        "type": "string",
                        "maxLength": 17,
                        "example": "WF0FXXWPMFKY73028"
                    },
                    "vin_short": {
                        "description": "Número de bastidor corto del vehículo",
                        "type": "string",
                        "maxLength": 10,
                        "example": "KY73028"
                    },
                    "design_id": {
                        "description": "Indica el modelo del vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "color_id": {
                        "description": "Indica el color del vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_code_id": {
                        "description": "Indica el código de destino del vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "entry_transport_id": {
                        "description": "Indica el método de entrada del vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "load_id": {
                        "description": "Indica la carga a la que pertenece el vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "dealer_id": {
                        "description": "Indica el distribuidor al que irá el vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "eoc": {
                        "description": "Identificador único de ford",
                        "type": "string",
                        "maxLength": 255,
                        "example": "5S8DQ87FZAFF090N6   WPMFKY73028  YSC B3EB  CPGD5EZJN A337C7B A6E 63  1765  MH 15"
                    },
                    "last_rule_id": {
                        "description": "Indica la última regla con mayor prioridad asociada al vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "shipping_rule_id": {
                        "description": "Indica la regla de código de destino asociada al vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "info": {
                        "description": "Información adicional del vehículo",
                        "type": "string",
                        "maxLength": 100,
                        "example": "Pendiente de revisión"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Vehicle"
                }
            },
            "Zone": {
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "maxLength": 20,
                        "readOnly": "true",
                        "example": "1"
                    },
                    "name": {
                        "description": "Nombre de la zona",
                        "type": "string",
                        "maxLength": 255,
                        "example": "CAMPA GENERAL"
                    },
                    "deleted_at": {
                        "description": "Fecha y hora del borrado temporal",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-12-09 11:20:01"
                    },
                    "created_at": {
                        "description": "Fecha y hora de la creación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-07 09:41:35"
                    },
                    "updated_at": {
                        "description": "Fecha y hora de la última modificación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-09 11:20:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Zone"
                }
            },
            "JsonApiDefinition": {
                "title": "JsonApiDefinition",
                "description": "JsonApiDefinition",
                "properties": {
                    "environment": {
                        "type": "string",
                        "example": "local"
                    },
                    "version": {
                        "type": "string",
                        "example": "1.0.0"
                    },
                    "name": {
                        "type": "string",
                        "example": "WPARK Api"
                    },
                    "summary": {
                        "type": "string",
                        "example": "Api for obtain information on operations within a Compound."
                    }
                },
                "type": "object",
                "xml": {
                    "name": "JsonApiDefinition"
                }
            },
            "ValidationErrorsDefinition": {
                "title": "ValidationErrorsDefinition",
                "description": "ValidationErrorsDefinition",
                "properties": {
                    "field": {
                        "type": "string",
                        "example": ""
                    },
                    "message": {
                        "type": "string",
                        "example": ""
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ValidationErrorsDefinition"
                }
            },
            "AreaStoreRequest": {
                "title": "Area Store Request",
                "description": "Area Store request body data",
                "required": [
                    "name",
                    "compound_id",
                    "zone_id"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del área",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ÁREA PROVISIONAL"
                    },
                    "compound_id": {
                        "description": "Indica la campa a la que pertence el área",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "zone_id": {
                        "description": "Indica la zona a la que pertence el área",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "AreaStoreRequest"
                }
            },
            "ForgotPasswordCheckTokenRequest": {
                "title": "Forgot Password Check Token Request",
                "description": "Forgot Password Check Token request body data",
                "required": [
                    "username",
                    "token"
                ],
                "properties": {
                    "username": {
                        "description": "Nombre de usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "javier.garrido"
                    },
                    "token": {
                        "description": "Token para cambio de contraseña",
                        "type": "string",
                        "maxLength": 255,
                        "example": "70acaa7417a2f743df80e040a40e67fd386ddc7eb1a477dfe59e6dc52ebcce46"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ForgotPasswordCheckTokenRequest"
                }
            },
            "ForgotPasswordResetRequest": {
                "title": "Forgot Password Reset Request",
                "description": "Forgot Password Reset request body data",
                "required": [
                    "email",
                    "password",
                    "password_confirmation",
                    "token"
                ],
                "properties": {
                    "username": {
                        "description": "Username del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "jgbacerca"
                    },
                    "password": {
                        "description": "Contraseña nueva del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "test"
                    },
                    "password_confirmation": {
                        "description": "Confirmación de la contraseña nueva del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "test"
                    },
                    "token": {
                        "description": "Token para cambio de contraseña",
                        "type": "string",
                        "maxLength": 255,
                        "example": "70acaa7417a2f743df80e040a40e67fd386ddc7eb1a477dfe59e6dc52ebcce46"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ForgotPasswordResetRequest"
                }
            },
            "ForgotPasswordSendRequest": {
                "title": "Forgot Password Send Request",
                "description": "Forgot Password Send request body data",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "description": "Email del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "jgbacerca@gmail.com"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ForgotPasswordSendRequest"
                }
            },
            "LoginRequest": {
                "title": "Login Request",
                "description": "Login request body data",
                "required": [
                    "username",
                    "password"
                ],
                "properties": {
                    "username": {
                        "description": "Nombre de usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "javier.garrido"
                    },
                    "password": {
                        "description": "Contraseña del usuario",
                        "type": "string",
                        "maxLength": 100,
                        "example": "jgbTest6;"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "LoginRequest"
                }
            },
            "ResetPasswordRequest": {
                "title": "Reset Password Request",
                "description": "Reset Password request body data",
                "required": [
                    "password",
                    "newPassword",
                    "confirmPassword"
                ],
                "properties": {
                    "password": {
                        "description": "Contraseña del usuario",
                        "type": "string",
                        "maxLength": 100,
                        "example": "jgbTest6;"
                    },
                    "newPassword": {
                        "description": "Contraseña nueva del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "test"
                    },
                    "confirmPassword": {
                        "description": "Confirmación de la contraseña nueva del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "test"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ResetPasswordRequest"
                }
            },
            "BlockAddToRowsRequest": {
                "title": "Block add to rows Request",
                "description": "Block add to rows request body data",
                "required": [
                    "rows"
                ],
                "properties": {
                    "rows": {
                        "description": "Ids de filas",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "example": "[1, 2, 3]"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BlockAddToRowsRequest"
                }
            },
            "BlockStoreRequest": {
                "title": "Block Store Request",
                "description": "Block Store request body data",
                "required": [
                    "name",
                    "is_presorting"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del bloque",
                        "type": "string",
                        "maxLength": 255,
                        "example": "BLOQUE ZP"
                    },
                    "is_presorting": {
                        "description": "Si el bloque es tipo presorting o normal",
                        "type": "boolean",
                        "example": "false"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BlockStoreRequest"
                }
            },
            "BlockUpdateRequest": {
                "title": "Block Update Request",
                "description": "Block Update request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del bloque",
                        "type": "string",
                        "maxLength": 255,
                        "example": "BLOQUE ZP"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BlockUpdateRequest"
                }
            },
            "BrandStoreRequest": {
                "title": "Brand Store Request",
                "description": "Brand Store request body data",
                "required": [
                    "name",
                    "code",
                    "compound_id"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la marca",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FORD"
                    },
                    "code": {
                        "description": "Código de la marca",
                        "type": "string",
                        "maxLength": 255,
                        "example": "12"
                    },
                    "compound_id": {
                        "description": "Indica la campa asociada a la marca",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BrandStoreRequest"
                }
            },
            "BrandUpdateRequest": {
                "title": "Brand Update Request",
                "description": "Brand Update request body data",
                "required": [
                    "name",
                    "code",
                    "compound_id"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la marca",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FORD"
                    },
                    "code": {
                        "description": "Código de la marca",
                        "type": "string",
                        "maxLength": 255,
                        "example": "12"
                    },
                    "compound_id": {
                        "description": "Indica la campa asociada a la marca",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BrandUpdateRequest"
                }
            },
            "CarrierMatchRequest": {
                "title": "Carrier Match Vins",
                "description": "Carrier Match vins",
                "required": [
                    "vins"
                ],
                "properties": {
                    "vins": {
                        "description": "List of Vins",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "NM0GE9E20N1514928",
                            "NM0GE9E20N1514931"
                        ]
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CarrierStoreRequest"
                }
            },
            "CarrierStoreRequest": {
                "title": "Carrier Store Request",
                "description": "Carrier Store request body data",
                "required": [
                    "name",
                    "short_name",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del transportista",
                        "type": "string",
                        "maxLength": 255,
                        "example": "SINTAX LOGISTICA SA"
                    },
                    "short_name": {
                        "description": "Nombre corto del transportista",
                        "type": "string",
                        "maxLength": 255,
                        "example": "SINTAX"
                    },
                    "code": {
                        "description": "Código del transportista",
                        "type": "string",
                        "maxLength": 10,
                        "minLength": 3,
                        "example": "BKT9A"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CarrierStoreRequest"
                }
            },
            "CarrierUpdateRequest": {
                "title": "Carrier Update Request",
                "description": "Carrier Update request body data",
                "required": [
                    "name",
                    "short_name",
                    "code",
                    "active"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del transportista",
                        "type": "string",
                        "maxLength": 255,
                        "example": "TRANSFESA LOGÍSTICA S.L."
                    },
                    "short_name": {
                        "description": "Nombre corto del transportista",
                        "type": "string",
                        "maxLength": 255,
                        "example": "TRANSFESA"
                    },
                    "code": {
                        "description": "Código del transportista",
                        "type": "string",
                        "maxLength": 10,
                        "minLength": 3,
                        "example": "TRANS"
                    },
                    "active": {
                        "description": "Indica si el transportista está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CarrierUpdateRequest"
                }
            },
            "ColorStoreRequest": {
                "title": "Color Store Request",
                "description": "Color Store request body data",
                "required": [
                    "name",
                    "code",
                    "simple_name",
                    "hex"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FROZEN WHITE"
                    },
                    "code": {
                        "description": "Código del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FRWH"
                    },
                    "simple_name": {
                        "description": "Nombre corto del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "WHITE"
                    },
                    "hex": {
                        "description": "Hexadecimal del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "#ffffff"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ColorStoreRequest"
                }
            },
            "ColorUpdateRequest": {
                "title": "Color Update Request",
                "description": "Color Update request body data",
                "required": [
                    "name",
                    "code",
                    "simple_name",
                    "hex"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FROZEN WHITE"
                    },
                    "code": {
                        "description": "Código del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FRWH"
                    },
                    "simple_name": {
                        "description": "Nombre corto del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "WHITE"
                    },
                    "hex": {
                        "description": "Hexadecimal del color",
                        "type": "string",
                        "maxLength": 255,
                        "example": "#ffffff"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ColorUpdateRequest"
                }
            },
            "CompoundStoreRequest": {
                "title": "Compound Store Request",
                "description": "Compound Store request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la campa",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FORD VALENCIA"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CompoundStoreRequest"
                }
            },
            "CompoundUpdateRequest": {
                "title": "Compound Update Request",
                "description": "Compound Update request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la campa",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FORD VALENCIA"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CompoundUpdateRequest"
                }
            },
            "ConditionStoreRequest": {
                "title": "Condition Store Request",
                "description": "Condition Store request body data",
                "required": [
                    "name",
                    "model_condition_id",
                    "required"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la condición",
                        "type": "string",
                        "maxLength": 255,
                        "example": "CÓDIGO DESTINO"
                    },
                    "description": {
                        "description": "Descripción de la condición",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Condición por códigos de destino"
                    },
                    "model_condition_id": {
                        "description": "Indica si la condición será para un hold o para una regla",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "required": {
                        "description": "Indica si la condición es obligatoria (0: No es obligatoria, 1: Es obligatoria)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ConditionStoreRequest"
                }
            },
            "ConditionUpdateRequest": {
                "title": "Condition Update Request",
                "description": "Condition Update request body data",
                "required": [
                    "name",
                    "model_condition_id",
                    "required"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la condición",
                        "type": "string",
                        "maxLength": 255,
                        "example": "CÓDIGO DESTINO"
                    },
                    "description": {
                        "description": "Descripción de la condición",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Condición por códigos de destino"
                    },
                    "model_condition_id": {
                        "description": "Indica si la condición será para un hold o para una regla",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "required": {
                        "description": "Indica si la condición es obligatoria (0: No es obligatoria, 1: Es obligatoria)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ConditionUpdateRequest"
                }
            },
            "CountryStoreRequest": {
                "title": "Country Store Request",
                "description": "Country Store request body data",
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del país",
                        "type": "string",
                        "maxLength": 255,
                        "example": "GERMANY"
                    },
                    "code": {
                        "description": "Código del país",
                        "type": "string",
                        "maxLength": 255,
                        "example": "GK"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CountryStoreRequest"
                }
            },
            "CountryUpdateRequest": {
                "title": "Country Update Request",
                "description": "Country Update request body data",
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del país",
                        "type": "string",
                        "maxLength": 255,
                        "example": "GERMANY"
                    },
                    "code": {
                        "description": "Código del país",
                        "type": "string",
                        "maxLength": 255,
                        "example": "GK"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CountryUpdateRequest"
                }
            },
            "DealerStoreRequest": {
                "title": "Dealer Store Request",
                "description": "Dealer Store request body data",
                "required": [
                    "name",
                    "code",
                    "zip_code",
                    "city",
                    "street",
                    "country"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "MOTOREBRE  S.A."
                    },
                    "code": {
                        "description": "Código del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "1045V"
                    },
                    "zip_code": {
                        "description": "Código postal del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "43870"
                    },
                    "city": {
                        "description": "Ciudad del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AMPOSTA"
                    },
                    "street": {
                        "description": "Dirección del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AVINGUDA DE SANT JAUME, S/N"
                    },
                    "country": {
                        "description": "Pais del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "España"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "DealerStoreRequest"
                }
            },
            "DealerUpdateRequest": {
                "title": "Dealer Update Request",
                "description": "Dealer Update request body data",
                "required": [
                    "name",
                    "code",
                    "zip_code",
                    "city",
                    "street",
                    "country"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "MOTOREBRE  S.A."
                    },
                    "code": {
                        "description": "Código del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "1045V"
                    },
                    "zip_code": {
                        "description": "Código postal del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "43870"
                    },
                    "city": {
                        "description": "Ciudad del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AMPOSTA"
                    },
                    "street": {
                        "description": "Dirección del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AVINGUDA DE SANT JAUME, S/N"
                    },
                    "country": {
                        "description": "Pais del distribuidor",
                        "type": "string",
                        "maxLength": 255,
                        "example": "España"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "DealerUpdateRequest"
                }
            },
            "DesignStoreRequest": {
                "title": "Design Store Request",
                "description": "Design Store request body data",
                "required": [
                    "name",
                    "code",
                    "brand_id",
                    "length",
                    "width",
                    "height",
                    "weight",
                    "description",
                    "manufacturing"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "KUGA 2021"
                    },
                    "short_name": {
                        "description": "Nombre corto del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "KUGA"
                    },
                    "code": {
                        "description": "Código del modelo",
                        "type": "string",
                        "maxLength": 25,
                        "example": "C250"
                    },
                    "brand_id": {
                        "description": "Indica la marca a la que pertence el modelo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "length": {
                        "description": "Longitud del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "4614"
                    },
                    "width": {
                        "description": "Anchura del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1882"
                    },
                    "height": {
                        "description": "Altura del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1661"
                    },
                    "weight": {
                        "description": "Peso del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1580"
                    },
                    "description": {
                        "description": "Descripción del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Kuga new"
                    },
                    "manufacturing": {
                        "description": "Indica si el modelo está fabricado (0: No fabricado, 1: Fabricado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "svg": {
                        "description": "Imagen del modelo",
                        "type": "string",
                        "example": "<svg>...</svg>"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "DesignStoreRequest"
                }
            },
            "DesignUpdateRequest": {
                "title": "Design Update Request",
                "description": "Design Update request body data",
                "required": [
                    "name",
                    "code",
                    "brand_id",
                    "length",
                    "width",
                    "height",
                    "weight",
                    "description",
                    "manufacturing"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "KUGA 2021"
                    },
                    "short_name": {
                        "description": "Nombre corto del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "KUGA"
                    },
                    "code": {
                        "description": "Código del modelo",
                        "type": "string",
                        "maxLength": 25,
                        "example": "C250"
                    },
                    "brand_id": {
                        "description": "Indica la marca a la que pertence el modelo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "length": {
                        "description": "Longitud del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "4614"
                    },
                    "width": {
                        "description": "Anchura del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1882"
                    },
                    "height": {
                        "description": "Altura del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1661"
                    },
                    "weight": {
                        "description": "Peso del modelo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1580"
                    },
                    "description": {
                        "description": "Descripción del modelo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Kuga new"
                    },
                    "manufacturing": {
                        "description": "Indica si el modelo está fabricado (0: No fabricado, 1: Fabricado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "svg": {
                        "description": "Imagen del modelo",
                        "type": "string",
                        "example": "<svg>...</svg>"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "DesignUpdateRequest"
                }
            },
            "DestinationCodeStoreRequest": {
                "title": "Destination Code Store Request",
                "description": "Destination Code Store request body data",
                "required": [
                    "name",
                    "code",
                    "country_id"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del código de destino",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ANTWERP_CHINA"
                    },
                    "code": {
                        "description": "Código del código de destino",
                        "type": "string",
                        "maxLength": 5,
                        "example": "AC"
                    },
                    "country_id": {
                        "description": "Indica el país del código de destino",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "description": {
                        "description": "Descripción del código de destino",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Código de destino para Italia"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "DestinationCodeStoreRequest"
                }
            },
            "DestinationCodeUpdateRequest": {
                "title": "Destination Code Update Request",
                "description": "Destination Code Update request body data",
                "required": [
                    "name",
                    "code",
                    "country_id",
                    "active"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del código de destino",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ANTWERP_CHINA"
                    },
                    "code": {
                        "description": "Código del código de destino",
                        "type": "string",
                        "maxLength": 5,
                        "example": "AC"
                    },
                    "country_id": {
                        "description": "Indica el país del código de destino",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "description": {
                        "description": "Descripción del código de destino",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Código de destino para Italia"
                    },
                    "active": {
                        "description": "Indica si el código de destino está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "DestinationCodeUpdateRequest"
                }
            },
            "VehicleReceivedRequest": {
                "title": "FreightVerify Vehicle Received Request",
                "description": "Send Vehicle Received Milestone to FreightVerify API",
                "required": [
                    "vin",
                    "transportationType",
                    "senderName",
                    "scac",
                    "ms1LocationCode",
                    "ms1StateOrProvinceCode",
                    "ms1CountryCode",
                    "compoundCode",
                    "yardCode",
                    "bayCode",
                    "nextCarrier",
                    "equipmentType",
                    "equipmentNumber",
                    "voyageNumber",
                    "assetId"
                ],
                "properties": {
                    "vin": {
                        "description": "VIN",
                        "type": "string",
                        "maxLength": 255
                    },
                    "transportationType": {
                        "description": "Mode types are defined as: 01 – Truck, 02 – Rail, 03 – Ship, 04 – Air",
                        "type": "string",
                        "maxLength": 2,
                        "enum": [
                            "01",
                            "02",
                            "03",
                            "04"
                        ]
                    },
                    "senderName": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "scac": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "ms1LocationCode": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "ms1StateOrProvinceCode": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "ms1CountryCode": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "compoundCode": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "yardCode": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "bayCode": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "nextCarrier": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "equipmentType": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "equipmentNumber": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "voyageNumber": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "assetId": {
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "type": "object",
                "xml": {
                    "name": "HoldStoreRequest"
                }
            },
            "HoldStoreRequest": {
                "title": "Hold Store Request",
                "description": "Hold Store request body data",
                "required": [
                    "name",
                    "code",
                    "priority",
                    "conditions"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del bloqueo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "STOLEN"
                    },
                    "code": {
                        "description": "Código del bloqueo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AZ"
                    },
                    "priority": {
                        "description": "Indica el orden de prioridad del bloqueo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "conditions": {
                        "description": "Id´s de las condiciones que irán asociadas al bloqueo",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "HoldStoreRequest"
                }
            },
            "HoldUpdateRequest": {
                "title": "Hold Update Request",
                "description": "Hold Update request body data",
                "required": [
                    "name",
                    "code",
                    "priority",
                    "active",
                    "conditions"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del bloqueo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "STOLEN"
                    },
                    "code": {
                        "description": "Código del bloqueo",
                        "type": "string",
                        "maxLength": 255,
                        "example": "AZ"
                    },
                    "priority": {
                        "description": "Indica el orden de prioridad del bloqueo",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "active": {
                        "description": "Indica si el bloqueo está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "conditions": {
                        "description": "Id´s de las condiciones que irán asociadas al bloqueo",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "HoldUpdateRequest"
                }
            },
            "LoadGenerateRequest": {
                "title": "Color Store Request",
                "description": "Color Store request body data",
                "required": [
                    "transport_exit_id",
                    "transport_identifier",
                    "carrier_id",
                    "vins",
                    "license_plate",
                    "compound_id"
                ],
                "properties": {
                    "transport_exit_id": {
                        "description": "ID del transporte de salida",
                        "type": "integer",
                        "maxLength": 20,
                        "minLength": 20,
                        "example": "3 → TRUCT"
                    },
                    "transport_identifier": {
                        "description": "Identificador de la carga",
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "example": "3 → TRUCT"
                    },
                    "carrier_id": {
                        "description": "Id del transportista",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "6"
                    },
                    "vins": {
                        "description": "Array de vins de los vehiculos",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": "['NM0GE9E20N1514928', 'NM0GE9E20N1514931']"
                    },
                    "license_plate": {
                        "description": "Matricula del camion",
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "example": "5263KAZ"
                    },
                    "compound_id": {
                        "description": "ID de la campa",
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "example": "2"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ColorStoreRequest"
                }
            },
            "LoadValidateRequest": {
                "title": "Color Store Request",
                "description": "Color Store request body data",
                "required": [
                    "name",
                    "code",
                    "simple_name",
                    "hex"
                ],
                "properties": {
                    "carrier_id": {
                        "description": "Id del transportista",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "6"
                    },
                    "vins": {
                        "description": "Array de vins de los vehiculos",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "NM0GE9E20N1514928",
                            "NM0GE9E20N1514931"
                        ]
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ColorStoreRequest"
                }
            },
            "MovementDatatablesRequest": {
                "title": "Movement Datatables Request",
                "description": "Movement request body data",
                "properties": {
                    "vins": {
                        "description": "Filtro por vins",
                        "properties": {
                            "value": {
                                "description": "Valores de vins separados por comas",
                                "type": "string",
                                "example": "DGEHEUDJJDDEUUEEJ,CNNMDJKREEKEK,OORRIIEOEOEIEEIEI"
                            },
                            "filter_type": {
                                "description": "Tipo de filtro: equal|not_equal",
                                "type": "string",
                                "example": "equal"
                            }
                        },
                        "type": "object",
                        "example": {
                            "value": "DGEHEUDJJDDEUUEEJ,CNNMDJKREEKEK,OORRIIEOEOEIEEIEI",
                            "filter_type": "equal"
                        }
                    },
                    "users": {
                        "description": "Filtro de usuarios de movimientos",
                        "type": "string",
                        "example": "1,2"
                    },
                    "origins_parkings": {
                        "description": "Filtro de parkings de origen de movimientos",
                        "type": "string",
                        "example": "1,2"
                    },
                    "destinations_parkings": {
                        "description": "Filtro de parkings de destino de movimientos",
                        "type": "string",
                        "example": "1"
                    },
                    "created_at": {
                        "description": "Filtro de rango de fechas de movimientos",
                        "type": "string",
                        "example": "18/05/2022 - 23/05/2022"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "MovementDatatatblesRequest"
                }
            },
            "MovementRecommendRequest": {
                "title": "Movement Recommend Request",
                "description": "Movement Recommend request body data",
                "required": [
                    "vehicle_id",
                    "action"
                ],
                "properties": {
                    "vehicle_id": {
                        "description": "Indica el vehículo sobre el que se va a hacer la recomendación",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "action": {
                        "description": "Indica el tipo de acción que se va a realizar en la recomendación",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "MovementRecommendRequest"
                }
            },
            "MovementStoreRequest": {
                "title": "Movement Store Request",
                "description": "Movement Store request body data",
                "required": [
                    "vehicle_id",
                    "user_id",
                    "origin_position_type",
                    "origin_position_id",
                    "destination_position_type",
                    "destination_position_id"
                ],
                "properties": {
                    "vehicle_id": {
                        "description": "Indica el vehículo que se mueve",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "user_id": {
                        "description": "Indica el usuario que está moviendo el vehículo",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "origin_position_type": {
                        "description": "Indica el tipo de posición slot o parking de origen",
                        "type": "string",
                        "maxLength": 255,
                        "example": "App\\Models\\Parking"
                    },
                    "origin_position_id": {
                        "description": "Indica la posición desde donde se hace el movimiento",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_position_type": {
                        "description": "Indica el tipo de posición slot o parking de destino",
                        "type": "string",
                        "maxLength": 255,
                        "example": "App\\Models\\Slot"
                    },
                    "destination_position_id": {
                        "description": "Indica la posición haciá donde se hace el movimiento",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "comments": {
                        "description": "Comentarios sobre la fila",
                        "type": "string",
                        "example": "Movimiento cancelado por bloqueo"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "MovementStoreRequest"
                }
            },
            "ParkingDesignStoreRequest": {
                "title": "Parking Design Store Request",
                "description": "Parking Design Store request body data",
                "required": [
                    "name",
                    "area_id",
                    "parking_type_id",
                    "rows",
                    "qr"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del parking",
                        "type": "string",
                        "maxLength": 255,
                        "example": "PU"
                    },
                    "area_id": {
                        "description": "Indica el área al que pertenece el parking",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "parking_type_id": {
                        "description": "Indica el tipo de parking",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "rows": {
                        "description": "Filas con sus propiedades",
                        "type": "array",
                        "items": {
                            "properties": {
                                "slots": {
                                    "type": "integer",
                                    "example": "10"
                                },
                                "block_id": {
                                    "type": "integer",
                                    "example": "2"
                                }
                            },
                            "type": "object"
                        },
                        "example": [
                            {
                                "slots": 10,
                                "block_id": 2
                            },
                            {
                                "slots": 10,
                                "block_id": 2
                            },
                            {
                                "slots": 10,
                                "block_id": null
                            },
                            {
                                "slots": 10,
                                "block_id": 2
                            },
                            {
                                "slots": 10,
                                "block_id": 2
                            }
                        ]
                    },
                    "qr": {
                        "description": "Parte izquierda del código qr pertenciente al parking",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "22"
                    },
                    "comments": {
                        "description": "Comentarios sobre el parking",
                        "type": "string",
                        "example": "Este parking deberá cambiar de ubicación"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ParkingDesignStoreRequest"
                }
            },
            "ParkingTypeStoreRequest": {
                "title": "ParkingType Store Request",
                "description": "ParkingType Store request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del tipo de parking",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ESPIGA"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ParkingTypeStoreRequest"
                }
            },
            "ParkingTypeUpdateRequest": {
                "title": "ParkingType Update Request",
                "description": "ParkingType Update request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del tipo de parking",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ESPIGA"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ParkingTypeUpdateRequest"
                }
            },
            "ParkingUpdateRequest": {
                "title": "Parking Update Request",
                "description": "Parking Update request body data",
                "required": [
                    "name",
                    "active"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del parking",
                        "type": "string",
                        "maxLength": 255,
                        "example": "PU"
                    },
                    "active": {
                        "description": "Indica si el parking está activo (0: No está activo, 1: Está activo)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    },
                    "comments": {
                        "description": "Comentarios sobre el parking",
                        "type": "string",
                        "example": "Este parking deberá cambiar de ubicación"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ParkingUpdateRequest"
                }
            },
            "RouteStoreRequest": {
                "title": "Route Store Request",
                "description": "Route Store request body data",
                "required": [
                    "name",
                    "cdm_code",
                    "route_type_id",
                    "carrier_id",
                    "destination_code_id",
                    "origin_compound_id"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la ruta",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ANTWERP CHINA"
                    },
                    "route_type_id": {
                        "description": "Indica el tipo de ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "cdm_code": {
                        "description": "Código de la ruta",
                        "type": "string",
                        "maxLength": 5,
                        "example": "AEP"
                    },
                    "carrier_id": {
                        "description": "Indica la empresa de transporte que hace la ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_code_id": {
                        "description": "Indica el código de destino de la ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "origin_compound_id": {
                        "description": "Indica la campa de origen",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_compound_id": {
                        "description": "Indica la campa de destino",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "comments": {
                        "description": "Comentarios sobre la ruta",
                        "type": "string",
                        "example": "Esta ruta actualmente tiene un desvío"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RouteStoreRequest"
                }
            },
            "RouteUpdateRequest": {
                "title": "Route Update Request",
                "description": "Route Update request body data",
                "required": [
                    "name",
                    "cdm_code",
                    "route_type_id",
                    "carrier_id",
                    "destination_code_id",
                    "origin_compound_id"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la ruta",
                        "type": "string",
                        "maxLength": 255,
                        "example": "ANTWERP CHINA"
                    },
                    "cdm_code": {
                        "description": "Código de la ruta",
                        "type": "string",
                        "maxLength": 5,
                        "example": "AEP"
                    },
                    "route_type_id": {
                        "description": "Indica el tipo de ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "carrier_id": {
                        "description": "Indica la empresa de transporte que hace la ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_code_id": {
                        "description": "Indica el código de destino de la ruta",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "origin_compound_id": {
                        "description": "Indica la campa de origen",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "destination_compound_id": {
                        "description": "Indica la campa de destino",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "comments": {
                        "description": "Comentarios sobre la ruta",
                        "type": "string",
                        "example": "Esta ruta actualmente tiene un desvío"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RouteUpdateRequest"
                }
            },
            "RowToggleActiveRequest": {
                "title": "Row Toggle Active Request",
                "description": "Row Toggle Active request body data",
                "properties": {
                    "comments": {
                        "description": "Comentarios sobre la fila",
                        "type": "string",
                        "example": "La fila está activada/desactivada"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RowToggleActiveRequest"
                }
            },
            "RowUpdateRequest": {
                "title": "Row Update Request",
                "description": "Row Update request body data",
                "required": [
                    "block_id",
                    "alt_qr"
                ],
                "properties": {
                    "block_id": {
                        "description": "Indica el bloque al que pertenece la fila",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "1"
                    },
                    "alt_qr": {
                        "description": "Código QR de la fila",
                        "type": "string",
                        "example": "022.001"
                    },
                    "comments": {
                        "description": "Comentarios sobre la fila",
                        "type": "string",
                        "example": "La fila está reservada"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RowUpdateRequest"
                }
            },
            "RuleStoreRequest": {
                "title": "Rule Store Request",
                "description": "Rule Store request body data",
                "required": [
                    "name",
                    "is_group"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la regla",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FORD"
                    },
                    "priority": {
                        "description": "Indica el orden de prioridad de la regla",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "is_group": {
                        "description": "Indica si es una regla simple o un grupo de reglas (0: Regla simple, 1: Grupo de reglas)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "block_id": {
                        "description": "Indica el bloque que va asociado la regla",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "2"
                    },
                    "carrier_id": {
                        "description": "Indica el transportista por defecto que va asociado la regla",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "conditions": {
                        "description": "Id´s de las condiciones que irán asociadas a la regla",
                        "type": "array",
                        "items": {
                            "properties": {
                                "condition_id": {
                                    "type": "integer",
                                    "example": "3"
                                },
                                "conditionable_type": {
                                    "type": "string",
                                    "example": "App\\Models\\DestinationCode"
                                },
                                "conditionable_id": {
                                    "type": "integer",
                                    "example": "2"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RuleStoreRequest"
                }
            },
            "RuleUpdateRequest": {
                "title": "Rule Update Request",
                "description": "Rule Update request body data",
                "required": [
                    "name",
                    "is_group",
                    "active"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la regla",
                        "type": "string",
                        "maxLength": 255,
                        "example": "FORD"
                    },
                    "priority": {
                        "description": "Indica el orden de prioridad de la regla",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "1"
                    },
                    "is_group": {
                        "description": "Indica si es una regla simple o un grupo de reglas (0: Regla simple, 1: Grupo de reglas)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "block_id": {
                        "description": "Indica el bloque que va asociado la regla",
                        "type": "integer",
                        "maxLength": 10,
                        "example": "2"
                    },
                    "carrier_id": {
                        "description": "Indica el transportista por defecto que va asociado la regla",
                        "type": "integer",
                        "maxLength": 20,
                        "example": "2"
                    },
                    "conditions": {
                        "description": "Id´s de las condiciones que irán asociadas a la regla",
                        "type": "array",
                        "items": {
                            "properties": {
                                "condition_id": {
                                    "type": "integer",
                                    "example": "3"
                                },
                                "conditionable_type": {
                                    "type": "string",
                                    "example": "App\\Models\\DestinationCode"
                                },
                                "conditionable_id": {
                                    "type": "integer",
                                    "example": "2"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "active": {
                        "description": "Indica si la regla está activa (0: No está activa, 1: Está activa)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RuleUpdateRequest"
                }
            },
            "SlotUpdateRequest": {
                "title": "Slot Update Request",
                "description": "Slot Update request body data",
                "properties": {
                    "comments": {
                        "description": "Comentarios sobre el slot",
                        "type": "string",
                        "example": "La slot está reservado"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "SlotUpdateRequest"
                }
            },
            "StageStoreRequest": {
                "title": "Stage Store Request",
                "description": "Stage Store request body data",
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la etapa",
                        "type": "string",
                        "maxLength": 255,
                        "example": "STAGE 3"
                    },
                    "code": {
                        "description": "Código de la etapa",
                        "type": "string",
                        "maxLength": 5,
                        "example": "ST3"
                    },
                    "description": {
                        "description": "Descripción de la etapa",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Etapa de creación del vehículo"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "StageStoreRequest"
                }
            },
            "StageUpdateRequest": {
                "title": "Stage Update Request",
                "description": "Stage Update request body data",
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la etapa",
                        "type": "string",
                        "maxLength": 255,
                        "example": "St3"
                    },
                    "code": {
                        "description": "Código de la etapa",
                        "type": "string",
                        "maxLength": 5,
                        "example": "03"
                    },
                    "description": {
                        "description": "Descripción de la etapa",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Etapa de creación del vehículo"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "StageUpdateRequest"
                }
            },
            "StateStoreRequest": {
                "title": "State Store Request",
                "description": "State Store request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del estado",
                        "type": "string",
                        "maxLength": 255,
                        "example": "STATIONED"
                    },
                    "description": {
                        "description": "Descripción del estado",
                        "type": "string",
                        "maxLength": 255,
                        "example": "El vehículo está estacionado"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "StateStoreRequest"
                }
            },
            "StateUpdateRequest": {
                "title": "State Update Request",
                "description": "State Update request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del estado",
                        "type": "string",
                        "maxLength": 255,
                        "example": "STATIONED"
                    },
                    "description": {
                        "description": "Descripción del estado",
                        "type": "string",
                        "maxLength": 255,
                        "example": "El vehículo está estacionado"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "StateUpdateRequest"
                }
            },
            "TransportStoreRequest": {
                "title": "Transport Store Request",
                "description": "Transport Store request body data",
                "required": [
                    "name",
                    "import"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del transporte",
                        "type": "string",
                        "maxLength": 255,
                        "example": "BOAT"
                    },
                    "import": {
                        "description": "Indica si el vehículo es importado (0: No es importado, 1: Es importado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "TransportStoreRequest"
                }
            },
            "TransportUpdateRequest": {
                "title": "Transport Update Request",
                "description": "Transport Update request body data",
                "required": [
                    "name",
                    "import"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del transporte",
                        "type": "string",
                        "maxLength": 255,
                        "example": "PLANE"
                    },
                    "import": {
                        "description": "Indica si el vehículo es importado (0: No es importado, 1: Es importado)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "1"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "TransportUpdateRequest"
                }
            },
            "UserGenerateUsernameRequest": {
                "title": "User Generate Username Request",
                "description": "User Generate Username request body data",
                "required": [
                    "name",
                    "surname"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del usuario",
                        "type": "string",
                        "example": "Javier"
                    },
                    "surname": {
                        "description": "Apellidos del usuario",
                        "type": "string",
                        "example": "Valera"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "UserGenerateUsernameRequest"
                }
            },
            "UserStoreRequest": {
                "title": "User Store Request",
                "description": "User Store request body data",
                "required": [
                    "name",
                    "email",
                    "username",
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del usuario",
                        "type": "string",
                        "maxLength": 75,
                        "example": "Javier"
                    },
                    "email": {
                        "description": "Email del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "jgbacerca@gmail.com"
                    },
                    "username": {
                        "description": "Nombre de usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "javier.garrido"
                    },
                    "password": {
                        "description": "Contraseña del usuario",
                        "type": "string",
                        "maxLength": 100,
                        "example": "jgbTest6;"
                    },
                    "password_confirmation": {
                        "description": "Contraseña de confirmación del usuario",
                        "type": "string",
                        "maxLength": 100,
                        "example": "jgbTest6;"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "UserStoreRequest"
                }
            },
            "UserUpdateRequest": {
                "title": "User Update Request",
                "description": "User Update request body data",
                "required": [
                    "name",
                    "surname",
                    "email",
                    "username"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre del usuario",
                        "type": "string",
                        "maxLength": 75,
                        "example": "Javier"
                    },
                    "surname": {
                        "description": "Apellidos del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Garrido Barroso"
                    },
                    "email": {
                        "description": "Email del usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "jgbacerca@gmail.com"
                    },
                    "username": {
                        "description": "Nombre de usuario",
                        "type": "string",
                        "maxLength": 255,
                        "example": "javier.garrido"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "UserUpdateRequest"
                }
            },
            "VehicleDatatablesRequest": {
                "title": "Vehicle Datatables Request",
                "description": "Vehicle Stage request body data",
                "properties": {
                    "state_id": {
                        "description": "Filtro por estado del vehículo",
                        "type": "integer",
                        "example": "2"
                    },
                    "rows": {
                        "description": "Filtro por ids de filas donde se encuentran ubicados los vehículos",
                        "type": "string",
                        "example": "2,3,4,5"
                    },
                    "vins": {
                        "description": "Filtro por vins",
                        "properties": {
                            "value": {
                                "description": "Valores de vins separados por comas",
                                "type": "string",
                                "example": "DGEHEUDJJDDEUUEEJ,CNNMDJKREEKEK,OORRIIEOEOEIEEIEI"
                            },
                            "filter_type": {
                                "description": "Tipo de filtro: equal|not_equal",
                                "type": "string",
                                "example": "equal"
                            }
                        },
                        "type": "object",
                        "example": {
                            "value": "DGEHEUDJJDDEUUEEJ,CNNMDJKREEKEK,OORRIIEOEOEIEEIEI",
                            "filter_type": "equal"
                        }
                    },
                    "state_date": {
                        "description": "Filtro por rango de fecha del estado seleccionado en el campo state_id",
                        "type": "string",
                        "example": "10/01/2022 - 20/01/2022"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "VehicleDatatatblesRequest"
                }
            },
            "VehicleStageRequest": {
                "title": "Vehicle Stage Request",
                "description": "Vehicle Stage request body data",
                "required": [
                    "tracking-date",
                    "lvin",
                    "pvin",
                    "station",
                    "eoc",
                    "destination"
                ],
                "properties": {
                    "tracking-date": {
                        "description": "Fecha y hora de la estación",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-07-29 16:05:01.111"
                    },
                    "lvin": {
                        "description": "Número físico de bastidor del vehículo",
                        "type": "string",
                        "maxLength": 17,
                        "example": "WF0UXXWPGUMK11563"
                    },
                    "pvin": {
                        "description": "Número lógico de bastidor del vehículo",
                        "type": "string",
                        "maxLength": 17,
                        "example": "WF0UXXWPGUMK11563"
                    },
                    "station": {
                        "description": "Código de la estación",
                        "type": "string",
                        "maxLength": 2,
                        "example": "03"
                    },
                    "eoc": {
                        "description": "Identificador único de ford",
                        "type": "string",
                        "maxLength": 80,
                        "example": "2AGK   H 397WDKN4 W WPGUMK11563  ZI9 U3GK1GGKIOPKM4R BM KA5M5N KMNW   22H  AZ  L"
                    },
                    "manual": {
                        "description": "Indica si la trama es manual o automática (0: No es manual, 1: Es manual)",
                        "type": "boolean",
                        "maxLength": 1,
                        "example": "0"
                    },
                    "destination": {
                        "description": "Código del código de destino",
                        "type": "string",
                        "maxLength": 3,
                        "example": "39"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "VehicleStageRequest"
                }
            },
            "ZoneStoreRequest": {
                "title": "Zone Store Request",
                "description": "Zone Store request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la zona",
                        "type": "string",
                        "maxLength": 255,
                        "example": "CAMPA GENERAL"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ZoneStoreRequest"
                }
            },
            "ZoneUpdateRequest": {
                "title": "Zone Update Request",
                "description": "Zone Update request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre de la zona",
                        "type": "string",
                        "maxLength": 255,
                        "example": "CAMPA GENERAL"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ZoneUpdateRequest"
                }
            },
            "UnauthorizedJsonContent": {
                "title": "Unauthorized Json",
                "description": "Unauthorized json response content",
                "properties": {
                    "jsonapi": {
                        "$ref": "#/components/schemas/JsonApiDefinition"
                    },
                    "code": {
                        "type": "integer",
                        "example": "401"
                    },
                    "message": {
                        "type": "string",
                        "example": "Unauthorized."
                    }
                },
                "type": "object",
                "xml": {
                    "name": "UnauthorizedJson"
                }
            }
        },
        "responses": {
            "Authentication": {
                "description": "Authentication Error."
            },
            "BadRequest": {
                "description": "Bad Request Error."
            },
            "Forbidden": {
                "description": "Permission Error."
            },
            "InternalServerError": {
                "description": "Internal Server Error"
            },
            "NotFound": {
                "description": "Resource Not Found."
            },
            "Unauthorized": {
                "description": "Unauthorized Error."
            },
            "UnprocessableEntity": {
                "description": "Validation Error."
            }
        },
        "parameters": {
            "datatables": {
                "name": "datatables",
                "in": "query",
                "description": "Formato de lista: simple o datatables",
                "required": false,
                "example": ""
            },
            "id": {
                "name": "id",
                "in": "path",
                "description": "id, eg; 1",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "vin": {
                "name": "vin",
                "in": "path",
                "description": "vin, eg; MK08949",
                "required": true,
                "schema": {
                    "type": "string"
                }
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "http",
                "description": "Laravel Sanctum token authentication",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            },
            "basic": {
                "type": "http",
                "description": "Basic authentication",
                "scheme": "basic"
            }
        }
    },
    "security": [
        []
    ]
}